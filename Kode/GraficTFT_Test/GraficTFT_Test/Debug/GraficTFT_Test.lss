
GraficTFT_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001388  00800200  00001054  000010e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00801588  00801588  00002470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020a6  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ffb  00000000  00000000  000046c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b85  00000000  00000000  000056c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00006248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008bc  00000000  00000000  00006708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017c4  00000000  00000000  00006fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e1       	ldi	r17, 0x15	; 21
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e5       	ldi	r30, 0x54	; 84
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 38       	cpi	r26, 0x88	; 136
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	25 e1       	ldi	r18, 0x15	; 21
     110:	a8 e8       	ldi	r26, 0x88	; 136
     112:	b5 e1       	ldi	r27, 0x15	; 21
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 38       	cpi	r26, 0x8C	; 140
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	79 d0       	rcall	.+242    	; 0x212 <main>
     120:	97 c7       	rjmp	.+3886   	; 0x1050 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <i2c_master_init>:
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
}

void i2c_master_nack()
{
	TWCR = (1 << TWINT) | (1 << TWEN);
     124:	e9 eb       	ldi	r30, 0xB9	; 185
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	8c 7f       	andi	r24, 0xFC	; 252
     12c:	80 83       	st	Z, r24
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     134:	08 95       	ret

00000136 <i2c_master_wait>:
     136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     13a:	88 23       	and	r24, r24
     13c:	44 f0       	brlt	.+16     	; 0x14e <i2c_master_wait+0x18>
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	ec eb       	ldi	r30, 0xBC	; 188
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	90 81       	ld	r25, Z
     146:	99 23       	and	r25, r25
     148:	14 f0       	brlt	.+4      	; 0x14e <i2c_master_wait+0x18>
     14a:	81 50       	subi	r24, 0x01	; 1
     14c:	d9 f7       	brne	.-10     	; 0x144 <i2c_master_wait+0xe>
     14e:	08 95       	ret

00000150 <i2c_master_start>:
     150:	84 ea       	ldi	r24, 0xA4	; 164
     152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     156:	ef cf       	rjmp	.-34     	; 0x136 <i2c_master_wait>
     158:	08 95       	ret

0000015a <i2c_master_receive>:
}

unsigned char i2c_master_receive(unsigned char address)
{
     15a:	af 92       	push	r10
     15c:	bf 92       	push	r11
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
	unsigned char data = 0;
	unsigned char address_r = (address << 1) | 0x01;
     16e:	88 0f       	add	r24, r24
     170:	d8 2f       	mov	r29, r24
     172:	d1 60       	ori	r29, 0x01	; 1
	unsigned char i = 0;
	unsigned char transfer = 1;
	
	i2c_master_start();
     174:	ed df       	rcall	.-38     	; 0x150 <i2c_master_start>

unsigned char i2c_master_receive(unsigned char address)
{
	unsigned char data = 0;
	unsigned char address_r = (address << 1) | 0x01;
	unsigned char i = 0;
     176:	c0 e0       	ldi	r28, 0x00	; 0
}

unsigned char i2c_master_status()
{
	// Set three last bits to zero and return status register value
	return (TWSR & 0xF8);
     178:	09 eb       	ldi	r16, 0xB9	; 185
     17a:	10 e0       	ldi	r17, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
}

void i2c_master_nack()
{
	TWCR = (1 << TWINT) | (1 << TWEN);
     17c:	0f 2e       	mov	r0, r31
     17e:	fc eb       	ldi	r31, 0xBC	; 188
     180:	ef 2e       	mov	r14, r31
     182:	f1 2c       	mov	r15, r1
     184:	f0 2d       	mov	r31, r0
     186:	0f 2e       	mov	r0, r31
     188:	f4 e8       	ldi	r31, 0x84	; 132
     18a:	af 2e       	mov	r10, r31
     18c:	f0 2d       	mov	r31, r0
		switch (i2c_master_status())
		{
			// Start condition has been transmitted
			case 0x08:
			// Contact slave and enter master transmitter mode
			TWDR = address_r;
     18e:	0f 2e       	mov	r0, r31
     190:	fb eb       	ldi	r31, 0xBB	; 187
     192:	cf 2e       	mov	r12, r31
     194:	d1 2c       	mov	r13, r1
     196:	f0 2d       	mov	r31, r0
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
}

void i2c_master_ack()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     198:	0f 2e       	mov	r0, r31
     19a:	f4 ec       	ldi	r31, 0xC4	; 196
     19c:	bf 2e       	mov	r11, r31
     19e:	f0 2d       	mov	r31, r0
}

unsigned char i2c_master_status()
{
	// Set three last bits to zero and return status register value
	return (TWSR & 0xF8);
     1a0:	f8 01       	movw	r30, r16
     1a2:	90 81       	ld	r25, Z
	
	i2c_master_start();
	while(transfer && i < 250)
	{
		//usart_transmit(twi_master_status());
		switch (i2c_master_status())
     1a4:	98 7f       	andi	r25, 0xF8	; 248
     1a6:	90 34       	cpi	r25, 0x40	; 64
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <i2c_master_receive+0x6e>
     1aa:	18 f4       	brcc	.+6      	; 0x1b2 <i2c_master_receive+0x58>
     1ac:	98 30       	cpi	r25, 0x08	; 8
     1ae:	31 f0       	breq	.+12     	; 0x1bc <i2c_master_receive+0x62>
     1b0:	15 c0       	rjmp	.+42     	; 0x1dc <i2c_master_receive+0x82>
     1b2:	90 35       	cpi	r25, 0x50	; 80
     1b4:	69 f0       	breq	.+26     	; 0x1d0 <i2c_master_receive+0x76>
     1b6:	98 35       	cpi	r25, 0x58	; 88
     1b8:	71 f0       	breq	.+28     	; 0x1d6 <i2c_master_receive+0x7c>
     1ba:	10 c0       	rjmp	.+32     	; 0x1dc <i2c_master_receive+0x82>
		{
			// Start condition has been transmitted
			case 0x08:
			// Contact slave and enter master transmitter mode
			TWDR = address_r;
     1bc:	f6 01       	movw	r30, r12
     1be:	d0 83       	st	Z, r29
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
}

void i2c_master_ack()
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     1c0:	f7 01       	movw	r30, r14
			// Start condition has been transmitted
			case 0x08:
			// Contact slave and enter master transmitter mode
			TWDR = address_r;
			i2c_master_ack();
			i2c_master_wait();
     1c2:	b0 82       	st	Z, r11
     1c4:	b8 df       	rcall	.-144    	; 0x136 <i2c_master_wait>
			break;
     1c6:	0a c0       	rjmp	.+20     	; 0x1dc <i2c_master_receive+0x82>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
}

void i2c_master_nack()
{
	TWCR = (1 << TWINT) | (1 << TWEN);
     1c8:	f7 01       	movw	r30, r14
			break;
			
			// SLA+R has been transmitted and acked
			case 0x40:
			i2c_master_nack();
			i2c_master_wait();
     1ca:	a0 82       	st	Z, r10
     1cc:	b4 df       	rcall	.-152    	; 0x136 <i2c_master_wait>
			break;
     1ce:	06 c0       	rjmp	.+12     	; 0x1dc <i2c_master_receive+0x82>
			
			// Data byte has been received and acked
			case 0x50:
			//SendChar('A');
			data = TWDR;
     1d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			transfer = 0;
			break;
     1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <i2c_master_receive+0x8a>
			
			// Data byte has been received and nacked
			case 0x58:
			//SendChar('B');
			data = TWDR;
     1d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			transfer = 0;
			break;
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <i2c_master_receive+0x8a>
		}
		i++;
     1dc:	cf 5f       	subi	r28, 0xFF	; 255
	unsigned char address_r = (address << 1) | 0x01;
	unsigned char i = 0;
	unsigned char transfer = 1;
	
	i2c_master_start();
	while(transfer && i < 250)
     1de:	ca 3f       	cpi	r28, 0xFA	; 250
     1e0:	f9 f6       	brne	.-66     	; 0x1a0 <i2c_master_receive+0x46>
     1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <i2c_master_receive+0x9a>
}

void i2c_master_stop()
{
	// Set stop bit
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     1e4:	94 e9       	ldi	r25, 0x94	; 148
     1e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			break;
		}
		i++;
	}
	i2c_master_stop();
	if(i < 250) return data;
     1ea:	cf 5f       	subi	r28, 0xFF	; 255
     1ec:	ca 3f       	cpi	r28, 0xFA	; 250
     1ee:	30 f0       	brcs	.+12     	; 0x1fc <i2c_master_receive+0xa2>
	else return 0xEE;
     1f0:	8e ee       	ldi	r24, 0xEE	; 238
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <i2c_master_receive+0xa2>
}

void i2c_master_stop()
{
	// Set stop bit
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     1f4:	84 e9       	ldi	r24, 0x94	; 148
     1f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		}
		i++;
	}
	i2c_master_stop();
	if(i < 250) return data;
	else return 0xEE;
     1fa:	8e ee       	ldi	r24, 0xEE	; 238
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	08 95       	ret

00000212 <main>:
#include "i2c.h"
#define ADDRESS 40


int main(void)
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	00 d0       	rcall	.+0      	; 0x218 <main+0x6>
     218:	1f 92       	push	r1
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	DisplayInit();
     21e:	e1 d0       	rcall	.+450    	; 0x3e2 <DisplayInit>
	i2c_master_init();
     220:	81 df       	rcall	.-254    	; 0x124 <i2c_master_init>
     222:	0f 2e       	mov	r0, r31
	int i = 0;
	//long int i=0;
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
     224:	ff e1       	ldi	r31, 0x1F	; 31
     226:	cf 2e       	mov	r12, r31
     228:	f0 2d       	mov	r31, r0
     22a:	0f 2e       	mov	r0, r31
     22c:	ff e3       	ldi	r31, 0x3F	; 63
     22e:	ef 2e       	mov	r14, r31
     230:	f0 2d       	mov	r31, r0
     232:	0f e1       	ldi	r16, 0x1F	; 31
     234:	20 ef       	ldi	r18, 0xF0	; 240
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e4       	ldi	r20, 0x40	; 64
     23a:	51 e0       	ldi	r21, 0x01	; 1
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	30 d1       	rcall	.+608    	; 0x4a6 <FillRectangle>
     246:	4a e0       	ldi	r20, 0x0A	; 10
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
	float countGreen=0;
	float countBlue=0;
	char color = 0;
	writeString("Sort M&M's",10,10);
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	6a e0       	ldi	r22, 0x0A	; 10
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	92 e0       	ldi	r25, 0x02	; 2
     252:	52 d2       	rcall	.+1188   	; 0x6f8 <writeString>
     254:	4a e0       	ldi	r20, 0x0A	; 10
	writeString("Total:",190,10);
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	6e eb       	ldi	r22, 0xBE	; 190
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	8b e0       	ldi	r24, 0x0B	; 11
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	4b d2       	rcall	.+1174   	; 0x6f8 <writeString>
     262:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	83 ed       	ldi	r24, 0xD3	; 211
     266:	90 e3       	ldi	r25, 0x30	; 48
     268:	21 50       	subi	r18, 0x01	; 1
     26a:	80 40       	sbci	r24, 0x00	; 0
     26c:	90 40       	sbci	r25, 0x00	; 0
     26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x56>
     270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x60>
     272:	00 00       	nop
     274:	19 82       	std	Y+1, r1	; 0x01
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
	float countGreen=0;
	float countBlue=0;
     276:	1a 82       	std	Y+2, r1	; 0x02
     278:	1b 82       	std	Y+3, r1	; 0x03
     27a:	1c 82       	std	Y+4, r1	; 0x04
     27c:	41 2c       	mov	r4, r1
	//long int i=0;
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
	float countGreen=0;
     27e:	51 2c       	mov	r5, r1
     280:	32 01       	movw	r6, r4
     282:	53 01       	movw	r10, r6
	int i = 0;
	//long int i=0;
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
     284:	42 01       	movw	r8, r4
     286:	0f 2e       	mov	r0, r31
	writeString("Total:",190,10);

	_delay_ms(1000);
    while (1) 
    {
		FillRectangle(0,0,320,240,31,63,31);
     288:	ff e1       	ldi	r31, 0x1F	; 31
     28a:	cf 2e       	mov	r12, r31
     28c:	f0 2d       	mov	r31, r0
     28e:	0f 2e       	mov	r0, r31
     290:	ff e3       	ldi	r31, 0x3F	; 63
     292:	ef 2e       	mov	r14, r31
     294:	f0 2d       	mov	r31, r0
     296:	0f e1       	ldi	r16, 0x1F	; 31
     298:	20 ef       	ldi	r18, 0xF0	; 240
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e4       	ldi	r20, 0x40	; 64
     29e:	51 e0       	ldi	r21, 0x01	; 1
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fe d0       	rcall	.+508    	; 0x4a6 <FillRectangle>
     2aa:	4a e0       	ldi	r20, 0x0A	; 10
		writeString("Sort M&M's",10,10);
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	6a e0       	ldi	r22, 0x0A	; 10
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	20 d2       	rcall	.+1088   	; 0x6f8 <writeString>
     2b8:	4a e0       	ldi	r20, 0x0A	; 10
		writeString("Total:",190,10);
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	6e eb       	ldi	r22, 0xBE	; 190
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	8b e0       	ldi	r24, 0x0B	; 11
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	19 d2       	rcall	.+1074   	; 0x6f8 <writeString>
     2c6:	88 e2       	ldi	r24, 0x28	; 40
		color = i2c_master_receive(ADDRESS);
     2c8:	48 df       	rcall	.-368    	; 0x15a <i2c_master_receive>
     2ca:	82 35       	cpi	r24, 0x52	; 82
		if (color == 'R')
     2cc:	51 f4       	brne	.+20     	; 0x2e2 <main+0xd0>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
		{
			countRed++;
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e8       	ldi	r20, 0x80	; 128
     2d4:	5f e3       	ldi	r21, 0x3F	; 63
     2d6:	c5 01       	movw	r24, r10
     2d8:	b4 01       	movw	r22, r8
     2da:	7f d4       	rcall	.+2302   	; 0xbda <__addsf3>
     2dc:	4b 01       	movw	r8, r22
     2de:	5c 01       	movw	r10, r24
     2e0:	1b c0       	rjmp	.+54     	; 0x318 <main+0x106>
     2e2:	87 34       	cpi	r24, 0x47	; 71
		}
		else if (color == 'G')
     2e4:	51 f4       	brne	.+20     	; 0x2fa <main+0xe8>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
		{
			countGreen++;
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e8       	ldi	r20, 0x80	; 128
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	c3 01       	movw	r24, r6
     2f0:	b2 01       	movw	r22, r4
     2f2:	73 d4       	rcall	.+2278   	; 0xbda <__addsf3>
     2f4:	2b 01       	movw	r4, r22
     2f6:	3c 01       	movw	r6, r24
     2f8:	0f c0       	rjmp	.+30     	; 0x318 <main+0x106>
     2fa:	82 34       	cpi	r24, 0x42	; 66
		}
		else if (color == 'B')
     2fc:	69 f4       	brne	.+26     	; 0x318 <main+0x106>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
		{
			countBlue++;
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	5f e3       	ldi	r21, 0x3F	; 63
     306:	69 81       	ldd	r22, Y+1	; 0x01
     308:	7a 81       	ldd	r23, Y+2	; 0x02
     30a:	8b 81       	ldd	r24, Y+3	; 0x03
     30c:	9c 81       	ldd	r25, Y+4	; 0x04
     30e:	65 d4       	rcall	.+2250   	; 0xbda <__addsf3>
     310:	69 83       	std	Y+1, r22	; 0x01
     312:	7a 83       	std	Y+2, r23	; 0x02
     314:	8b 83       	std	Y+3, r24	; 0x03
     316:	9c 83       	std	Y+4, r25	; 0x04
     318:	e9 80       	ldd	r14, Y+1	; 0x01
		}
		
		drawTotal(countRed, countGreen, countBlue);
     31a:	fa 80       	ldd	r15, Y+2	; 0x02
     31c:	0b 81       	ldd	r16, Y+3	; 0x03
     31e:	1c 81       	ldd	r17, Y+4	; 0x04
     320:	a3 01       	movw	r20, r6
     322:	92 01       	movw	r18, r4
     324:	c5 01       	movw	r24, r10
     326:	b4 01       	movw	r22, r8
     328:	bc d3       	rcall	.+1912   	; 0xaa2 <drawTotal>
		//countBlue(count);
		//countRed(count);

		//writeString("12",50,100);
		
		countRed++;
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	c5 01       	movw	r24, r10
     334:	b4 01       	movw	r22, r8
     336:	51 d4       	rcall	.+2210   	; 0xbda <__addsf3>
     338:	20 e0       	ldi	r18, 0x00	; 0
		countRed++;
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e8       	ldi	r20, 0x80	; 128
     33e:	5f e3       	ldi	r21, 0x3F	; 63
     340:	4c d4       	rcall	.+2200   	; 0xbda <__addsf3>
     342:	4b 01       	movw	r8, r22
     344:	5c 01       	movw	r10, r24
     346:	20 e0       	ldi	r18, 0x00	; 0
		countBlue++;
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e8       	ldi	r20, 0x80	; 128
     34c:	5f e3       	ldi	r21, 0x3F	; 63
     34e:	69 81       	ldd	r22, Y+1	; 0x01
     350:	7a 81       	ldd	r23, Y+2	; 0x02
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	41 d4       	rcall	.+2178   	; 0xbda <__addsf3>
     358:	69 83       	std	Y+1, r22	; 0x01
     35a:	7a 83       	std	Y+2, r23	; 0x02
     35c:	8b 83       	std	Y+3, r24	; 0x03
     35e:	9c 83       	std	Y+4, r25	; 0x04
     360:	20 e0       	ldi	r18, 0x00	; 0
		countGreen++;
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e8       	ldi	r20, 0x80	; 128
     366:	5f e3       	ldi	r21, 0x3F	; 63
     368:	c3 01       	movw	r24, r6
     36a:	b2 01       	movw	r22, r4
     36c:	36 d4       	rcall	.+2156   	; 0xbda <__addsf3>
     36e:	2b 01       	movw	r4, r22
     370:	3c 01       	movw	r6, r24
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	83 ed       	ldi	r24, 0xD3	; 211
     376:	90 e3       	ldi	r25, 0x30	; 48
     378:	21 50       	subi	r18, 0x01	; 1
     37a:	80 40       	sbci	r24, 0x00	; 0
     37c:	90 40       	sbci	r25, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x166>
     380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x170>
     382:	00 00       	nop
     384:	12 d0       	rcall	.+36     	; 0x3aa <DisplayOn>
	
		_delay_ms(1000);
		DisplayOn();
     386:	7f cf       	rjmp	.-258    	; 0x286 <main+0x74>

00000388 <WriteCommand>:
     388:	88 b9       	out	0x08, r24	; 8


		
    }
     38a:	5f 98       	cbi	0x0b, 7	; 11
	 WriteCommand(0x2C);
 }
 
 //Red 0-31, Green 0-63, blue 0-31
 void WritePixel(unsigned char Red, unsigned char Blue, unsigned char Green){
	 WriteData((Red<<11)|(Green<<5)|Blue);
     38c:	a1 98       	cbi	0x14, 1	; 20
     38e:	a2 98       	cbi	0x14, 2	; 20
     390:	00 00       	nop
     392:	a2 9a       	sbi	0x14, 2	; 20
     394:	00 00       	nop
     396:	08 95       	ret

00000398 <WriteData>:
     398:	92 b9       	out	0x02, r25	; 2
     39a:	88 b9       	out	0x08, r24	; 8
     39c:	5f 9a       	sbi	0x0b, 7	; 11
     39e:	a1 98       	cbi	0x14, 1	; 20
     3a0:	a2 98       	cbi	0x14, 2	; 20
     3a2:	00 00       	nop
     3a4:	a2 9a       	sbi	0x14, 2	; 20
     3a6:	00 00       	nop
     3a8:	08 95       	ret

000003aa <DisplayOn>:
     3aa:	89 e2       	ldi	r24, 0x29	; 41
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	ec cf       	rjmp	.-40     	; 0x388 <WriteCommand>
     3b0:	08 95       	ret

000003b2 <SleepOut>:
     3b2:	81 e1       	ldi	r24, 0x11	; 17
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	e8 cf       	rjmp	.-48     	; 0x388 <WriteCommand>
     3b8:	08 95       	ret

000003ba <MemoryAccessControl>:
     3ba:	cf 93       	push	r28
     3bc:	c8 2f       	mov	r28, r24
     3be:	86 e3       	ldi	r24, 0x36	; 54
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	e2 df       	rcall	.-60     	; 0x388 <WriteCommand>
     3c4:	8c 2f       	mov	r24, r28
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	e7 df       	rcall	.-50     	; 0x398 <WriteData>
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <InterfacePixelFormat>:
     3ce:	cf 93       	push	r28
     3d0:	c8 2f       	mov	r28, r24
     3d2:	8a e3       	ldi	r24, 0x3A	; 58
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	d8 df       	rcall	.-80     	; 0x388 <WriteCommand>
     3d8:	8c 2f       	mov	r24, r28
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	dd df       	rcall	.-70     	; 0x398 <WriteData>
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <DisplayInit>:
     3e2:	83 b3       	in	r24, 0x13	; 19
     3e4:	87 60       	ori	r24, 0x07	; 7
     3e6:	83 bb       	out	0x13, r24	; 19
     3e8:	57 9a       	sbi	0x0a, 7	; 10
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	81 b9       	out	0x01, r24	; 1
     3ee:	87 b9       	out	0x07, r24	; 7
     3f0:	84 b3       	in	r24, 0x14	; 20
     3f2:	87 60       	ori	r24, 0x07	; 7
     3f4:	84 bb       	out	0x14, r24	; 20
     3f6:	5f 9a       	sbi	0x0b, 7	; 11
     3f8:	a1 98       	cbi	0x14, 1	; 20
     3fa:	2f ef       	ldi	r18, 0xFF	; 255
     3fc:	85 ea       	ldi	r24, 0xA5	; 165
     3fe:	9e e0       	ldi	r25, 0x0E	; 14
     400:	21 50       	subi	r18, 0x01	; 1
     402:	80 40       	sbci	r24, 0x00	; 0
     404:	90 40       	sbci	r25, 0x00	; 0
     406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	a1 9a       	sbi	0x14, 1	; 20
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	88 e5       	ldi	r24, 0x58	; 88
     412:	96 e0       	ldi	r25, 0x06	; 6
     414:	21 50       	subi	r18, 0x01	; 1
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	90 40       	sbci	r25, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
     420:	c8 df       	rcall	.-112    	; 0x3b2 <SleepOut>
     422:	c3 df       	rcall	.-122    	; 0x3aa <DisplayOn>
     424:	88 e0       	ldi	r24, 0x08	; 8
     426:	c9 df       	rcall	.-110    	; 0x3ba <MemoryAccessControl>
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	d1 cf       	rjmp	.-94     	; 0x3ce <InterfacePixelFormat>
     42c:	08 95       	ret

0000042e <MemoryWrite>:
     42e:	8c e2       	ldi	r24, 0x2C	; 44
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	aa cf       	rjmp	.-172    	; 0x388 <WriteCommand>
     434:	08 95       	ret

00000436 <SetColomnAddress>:
 }
 void SetColomnAddress(unsigned int Start,unsigned int End){
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	08 2f       	mov	r16, r24
     440:	d9 2f       	mov	r29, r25
     442:	16 2f       	mov	r17, r22
     444:	c7 2f       	mov	r28, r23
	 WriteCommand(0x2A);
     446:	8a e2       	ldi	r24, 0x2A	; 42
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	9e df       	rcall	.-196    	; 0x388 <WriteCommand>
	 WriteData(Start>>8);
     44c:	8d 2f       	mov	r24, r29
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	a3 df       	rcall	.-186    	; 0x398 <WriteData>
	 WriteData(Start);
     452:	80 2f       	mov	r24, r16
     454:	9d 2f       	mov	r25, r29
     456:	a0 df       	rcall	.-192    	; 0x398 <WriteData>
	 WriteData(End>>8);
     458:	8c 2f       	mov	r24, r28
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9d df       	rcall	.-198    	; 0x398 <WriteData>
	 WriteData(End);
     45e:	81 2f       	mov	r24, r17
     460:	9c 2f       	mov	r25, r28
     462:	9a df       	rcall	.-204    	; 0x398 <WriteData>
     464:	df 91       	pop	r29
 }
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	08 95       	ret

0000046e <SetPageAddress>:
     46e:	0f 93       	push	r16
 
 void SetPageAddress(unsigned int Start,unsigned int End){
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	08 2f       	mov	r16, r24
     478:	d9 2f       	mov	r29, r25
     47a:	16 2f       	mov	r17, r22
     47c:	c7 2f       	mov	r28, r23
	 	 WriteCommand(0x2B);
     47e:	8b e2       	ldi	r24, 0x2B	; 43
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	82 df       	rcall	.-252    	; 0x388 <WriteCommand>
	 	 WriteData(Start>>8);
     484:	8d 2f       	mov	r24, r29
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	87 df       	rcall	.-242    	; 0x398 <WriteData>
	 	 WriteData(Start);
     48a:	80 2f       	mov	r24, r16
     48c:	9d 2f       	mov	r25, r29
     48e:	84 df       	rcall	.-248    	; 0x398 <WriteData>
	 	 WriteData(End>>8);
     490:	8c 2f       	mov	r24, r28
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	81 df       	rcall	.-254    	; 0x398 <WriteData>
	 	 WriteData(End);
     496:	81 2f       	mov	r24, r17
     498:	9c 2f       	mov	r25, r28
     49a:	7e df       	rcall	.-260    	; 0x398 <WriteData>
     49c:	df 91       	pop	r29
 }
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <FillRectangle>:
     4a6:	8f 92       	push	r8
 
 void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Blue, unsigned char Green){
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	eb 01       	movw	r28, r22
     4c0:	4a 01       	movw	r8, r20
     4c2:	59 01       	movw	r10, r18
	 SetPageAddress(StartX,StartX+Width);
     4c4:	bc 01       	movw	r22, r24
     4c6:	64 0f       	add	r22, r20
     4c8:	75 1f       	adc	r23, r21
     4ca:	d1 df       	rcall	.-94     	; 0x46e <SetPageAddress>
	 SetColomnAddress(StartY,StartY+Height);
     4cc:	be 01       	movw	r22, r28
     4ce:	6a 0d       	add	r22, r10
     4d0:	7b 1d       	adc	r23, r11
     4d2:	ce 01       	movw	r24, r28
	 MemoryWrite();
     4d4:	b0 df       	rcall	.-160    	; 0x436 <SetColomnAddress>
	 for(unsigned long i=0; i<((unsigned long)Width*Height);i++)
     4d6:	ab df       	rcall	.-170    	; 0x42e <MemoryWrite>
     4d8:	94 01       	movw	r18, r8
     4da:	d5 01       	movw	r26, r10
     4dc:	aa d5       	rcall	.+2900   	; 0x1032 <__umulhisi3>
     4de:	4b 01       	movw	r8, r22
     4e0:	5c 01       	movw	r10, r24
     4e2:	67 2b       	or	r22, r23
     4e4:	68 2b       	or	r22, r24
     4e6:	69 2b       	or	r22, r25
     4e8:	e1 f0       	breq	.+56     	; 0x522 <FillRectangle+0x7c>
	 WriteCommand(0x2C);
 }
 
 //Red 0-31, Green 0-63, blue 0-31
 void WritePixel(unsigned char Red, unsigned char Blue, unsigned char Green){
	 WriteData((Red<<11)|(Green<<5)|Blue);
     4ea:	80 e2       	ldi	r24, 0x20	; 32
     4ec:	e8 9e       	mul	r14, r24
     4ee:	70 01       	movw	r14, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	ec 28       	or	r14, r12
     4f4:	10 e0       	ldi	r17, 0x00	; 0
     4f6:	10 2f       	mov	r17, r16
     4f8:	00 27       	eor	r16, r16
     4fa:	11 0f       	add	r17, r17
     4fc:	11 0f       	add	r17, r17
     4fe:	11 0f       	add	r17, r17
     500:	0e 29       	or	r16, r14
     502:	1f 29       	or	r17, r15
     504:	c1 2c       	mov	r12, r1
     506:	d1 2c       	mov	r13, r1
     508:	76 01       	movw	r14, r12
     50a:	c8 01       	movw	r24, r16
     50c:	45 df       	rcall	.-374    	; 0x398 <WriteData>
 
 void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Blue, unsigned char Green){
	 SetPageAddress(StartX,StartX+Width);
	 SetColomnAddress(StartY,StartY+Height);
	 MemoryWrite();
	 for(unsigned long i=0; i<((unsigned long)Width*Height);i++)
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	c8 1a       	sub	r12, r24
     512:	d8 0a       	sbc	r13, r24
     514:	e8 0a       	sbc	r14, r24
     516:	f8 0a       	sbc	r15, r24
     518:	c8 14       	cp	r12, r8
     51a:	d9 04       	cpc	r13, r9
     51c:	ea 04       	cpc	r14, r10
     51e:	fb 04       	cpc	r15, r11
     520:	a1 f7       	brne	.-24     	; 0x50a <FillRectangle+0x64>
		WritePixel(Red,Green,Blue);
 }
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	cf 90       	pop	r12
     532:	bf 90       	pop	r11
     534:	af 90       	pop	r10
     536:	9f 90       	pop	r9
     538:	8f 90       	pop	r8
     53a:	08 95       	ret

0000053c <lengthOfFixedSymbol>:
	//prepares the offset for next letter.
	start_x = start_x+symbol_carrier[length_of_symbol]+1; 
		
}
int lengthOfFixedSymbol(int length_of_symbol){
	int fixed_letter = symbol_carrier[length_of_symbol]/8;
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	fc 01       	movw	r30, r24
     542:	e4 5f       	subi	r30, 0xF4	; 244
     544:	fb 4e       	sbci	r31, 0xEB	; 235
     546:	20 81       	ld	r18, Z
     548:	31 81       	ldd	r19, Z+1	; 0x01
     54a:	c9 01       	movw	r24, r18
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	96 95       	lsr	r25
     552:	87 95       	ror	r24
     554:	96 95       	lsr	r25
     556:	87 95       	ror	r24
	int modulus_fixed_letter = symbol_carrier[length_of_symbol]%8;
	if(modulus_fixed_letter>0){
     558:	27 70       	andi	r18, 0x07	; 7
     55a:	33 27       	eor	r19, r19
     55c:	12 16       	cp	r1, r18
     55e:	13 06       	cpc	r1, r19
     560:	0c f4       	brge	.+2      	; 0x564 <lengthOfFixedSymbol+0x28>
		fixed_letter++;
     562:	01 96       	adiw	r24, 0x01	; 1
	} 
	return fixed_letter;
}
     564:	08 95       	ret

00000566 <drawSymbol>:


void drawSymbol(const uint8_t bitmap[],int length,int length_count,int startx,int starty, int letter){
     566:	2f 92       	push	r2
     568:	3f 92       	push	r3
     56a:	4f 92       	push	r4
     56c:	5f 92       	push	r5
     56e:	6f 92       	push	r6
     570:	7f 92       	push	r7
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
	//Sets starts position on x-axis 
	int startX = startx;
	//Sets stop position on x-axis
	int stopX= startx+7;
     58a:	f9 01       	movw	r30, r18
     58c:	37 96       	adiw	r30, 0x07	; 7
	//Sets start position on y-axis
	int starY = starty;
	
	// this for loop runs trough the full byte length of the letter according to the bitmap from Dotfactory.
	for (int j=0;j<length_count;j++)
     58e:	14 16       	cp	r1, r20
     590:	15 06       	cpc	r1, r21
     592:	0c f0       	brlt	.+2      	; 0x596 <drawSymbol+0x30>
     594:	53 c0       	rjmp	.+166    	; 0x63c <drawSymbol+0xd6>
		startX = stopX+1;
		stopX = stopX+8;
		
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
     596:	66 0f       	add	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	66 0f       	add	r22, r22
     59c:	77 1f       	adc	r23, r23
     59e:	66 0f       	add	r22, r22
     5a0:	77 1f       	adc	r23, r23
     5a2:	5b 01       	movw	r10, r22
     5a4:	a2 0e       	add	r10, r18
     5a6:	b3 1e       	adc	r11, r19
     5a8:	ec 01       	movw	r28, r24
     5aa:	ce 0d       	add	r28, r14
     5ac:	df 1d       	adc	r29, r15
     5ae:	e4 0e       	add	r14, r20
     5b0:	f5 1e       	adc	r15, r21
     5b2:	4c 01       	movw	r8, r24
     5b4:	8e 0c       	add	r8, r14
     5b6:	9f 1c       	adc	r9, r15
     5b8:	6f 01       	movw	r12, r30
     5ba:	c9 01       	movw	r24, r18
		
		// This for loop runs the byte through and checks if every single bit is high or low
		// if that bit is high a black dot is made, if the bit is low a withe dot is made.
		for (int i=0; i<8; i++)
		{
			if((bitmap[j+letter] & (0b10000000>>i)) != 0)
     5bc:	68 94       	set
     5be:	ee 24       	eor	r14, r14
     5c0:	e7 f8       	bld	r14, 7
     5c2:	f1 2c       	mov	r15, r1
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
			startX = startx;
			stopX = startX+7;
     5c4:	2e 2e       	mov	r2, r30
     5c6:	3f 2e       	mov	r3, r31
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
			startX = startx;
     5c8:	42 2e       	mov	r4, r18
     5ca:	53 2e       	mov	r5, r19
	
	// this for loop runs trough the full byte length of the letter according to the bitmap from Dotfactory.
	for (int j=0;j<length_count;j++)
	{
		//Set page and colomn address
		SetPageAddress(startX,stopX);
     5cc:	b6 01       	movw	r22, r12
     5ce:	4f df       	rcall	.-354    	; 0x46e <SetPageAddress>
		SetColomnAddress(starY,starY);
     5d0:	b8 01       	movw	r22, r16
     5d2:	c8 01       	movw	r24, r16
		MemoryWrite();
     5d4:	30 df       	rcall	.-416    	; 0x436 <SetColomnAddress>
     5d6:	2b df       	rcall	.-426    	; 0x42e <MemoryWrite>
		
		// This for loop runs the byte through and checks if every single bit is high or low
		// if that bit is high a black dot is made, if the bit is low a withe dot is made.
		for (int i=0; i<8; i++)
     5d8:	61 2c       	mov	r6, r1
     5da:	71 2c       	mov	r7, r1
		{
			if((bitmap[j+letter] & (0b10000000>>i)) != 0)
     5dc:	88 81       	ld	r24, Y
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	c7 01       	movw	r24, r14
     5e4:	06 2c       	mov	r0, r6
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <drawSymbol+0x86>
     5e8:	95 95       	asr	r25
     5ea:	87 95       	ror	r24
     5ec:	0a 94       	dec	r0
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <drawSymbol+0x82>
     5f0:	82 23       	and	r24, r18
     5f2:	93 23       	and	r25, r19
     5f4:	89 2b       	or	r24, r25
	 WriteCommand(0x2C);
 }
 
 //Red 0-31, Green 0-63, blue 0-31
 void WritePixel(unsigned char Red, unsigned char Blue, unsigned char Green){
	 WriteData((Red<<11)|(Green<<5)|Blue);
     5f6:	21 f0       	breq	.+8      	; 0x600 <drawSymbol+0x9a>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	cd de       	rcall	.-614    	; 0x398 <WriteData>
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <drawSymbol+0xa0>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	9f ef       	ldi	r25, 0xFF	; 255
     604:	c9 de       	rcall	.-622    	; 0x398 <WriteData>
		SetColomnAddress(starY,starY);
		MemoryWrite();
		
		// This for loop runs the byte through and checks if every single bit is high or low
		// if that bit is high a black dot is made, if the bit is low a withe dot is made.
		for (int i=0; i<8; i++)
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	68 1a       	sub	r6, r24
     60a:	78 0a       	sbc	r7, r24
     60c:	88 e0       	ldi	r24, 0x08	; 8
     60e:	68 16       	cp	r6, r24
     610:	71 04       	cpc	r7, r1
     612:	21 f7       	brne	.-56     	; 0x5dc <drawSymbol+0x76>
			}
		}
		
		//Set new startX to be ready for next byte. (+1 to not override the last bit in the last byte)
		startX = stopX+1;
		stopX = stopX+8;
     614:	96 01       	movw	r18, r12
     616:	28 5f       	subi	r18, 0xF8	; 248
     618:	3f 4f       	sbci	r19, 0xFF	; 255
		
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
     61a:	2a 15       	cp	r18, r10
     61c:	3b 05       	cpc	r19, r11
     61e:	24 f4       	brge	.+8      	; 0x628 <drawSymbol+0xc2>
				WritePixel(31,31,63);
			}
		}
		
		//Set new startX to be ready for next byte. (+1 to not override the last bit in the last byte)
		startX = stopX+1;
     620:	c6 01       	movw	r24, r12
     622:	01 96       	adiw	r24, 0x01	; 1
		stopX = stopX+8;
     624:	69 01       	movw	r12, r18
     626:	06 c0       	rjmp	.+12     	; 0x634 <drawSymbol+0xce>
		
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
     628:	0f 5f       	subi	r16, 0xFF	; 255
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
			startX = startx;
			stopX = startX+7;
     62c:	c2 2c       	mov	r12, r2
     62e:	d3 2c       	mov	r13, r3
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
			startX = startx;
     630:	84 2d       	mov	r24, r4
     632:	95 2d       	mov	r25, r5
     634:	21 96       	adiw	r28, 0x01	; 1
	int stopX= startx+7;
	//Sets start position on y-axis
	int starY = starty;
	
	// this for loop runs trough the full byte length of the letter according to the bitmap from Dotfactory.
	for (int j=0;j<length_count;j++)
     636:	c8 15       	cp	r28, r8
     638:	d9 05       	cpc	r29, r9
     63a:	41 f6       	brne	.-112    	; 0x5cc <drawSymbol+0x66>
			stopX = startX+7;
		}
	}
	

}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	3f 90       	pop	r3
     65e:	2f 90       	pop	r2
     660:	08 95       	ret

00000662 <getSymbolParameters>:
	 MemoryWrite();
	 for(unsigned long i=0; i<((unsigned long)Width*Height);i++)
		WritePixel(Red,Green,Blue);
 }
 
void getSymbolParameters(int length_of_symbol, int startX, int startY){
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	8a 01       	movw	r16, r20
	//Makes sure to not override the previous letter.
	if (startX != checkX)
     670:	20 91 88 15 	lds	r18, 0x1588	; 0x801588 <__data_end>
     674:	30 91 89 15 	lds	r19, 0x1589	; 0x801589 <__data_end+0x1>
     678:	26 17       	cp	r18, r22
     67a:	37 07       	cpc	r19, r23
     67c:	41 f0       	breq	.+16     	; 0x68e <getSymbolParameters+0x2c>
	{
		checkX = startX;
     67e:	70 93 89 15 	sts	0x1589, r23	; 0x801589 <__data_end+0x1>
     682:	60 93 88 15 	sts	0x1588, r22	; 0x801588 <__data_end>
		start_x = startX;
     686:	70 93 8b 15 	sts	0x158B, r23	; 0x80158b <start_x+0x1>
     68a:	60 93 8a 15 	sts	0x158A, r22	; 0x80158a <start_x>
	}
	//the first parameter is the length of the letter, the second is the offset. Therefore to get the length of the letter 
	// I have to multiply by 2. 
	length_of_symbol = length_of_symbol*2; //The parameters from array_carrier in the DotFactory.h
     68e:	ec 01       	movw	r28, r24
     690:	cc 0f       	add	r28, r28
     692:	dd 1f       	adc	r29, r29
	
	// is the length of the chosen character in the DotFactory BitMap[]. 
	int length_count = symbol_carrier[length_of_symbol+3]-symbol_carrier[length_of_symbol+1];
     694:	fe 01       	movw	r30, r28
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e2 5f       	subi	r30, 0xF2	; 242
     69c:	fb 4e       	sbci	r31, 0xEB	; 235
     69e:	e0 80       	ld	r14, Z
     6a0:	f1 80       	ldd	r15, Z+1	; 0x01
	
	//is the offset of where in the DotFactory BitMap[] to read from.
	unsigned int offset_symbol = symbol_carrier[length_of_symbol+1];
	//A function to return the length of letter en whole byte
	int fixed_letter = lengthOfFixedSymbol(length_of_symbol); 	
     6a2:	ce 01       	movw	r24, r28
     6a4:	4b df       	rcall	.-362    	; 0x53c <lengthOfFixedSymbol>
	
	drawSymbol(symbols,fixed_letter,length_count,start_x,startY, offset_symbol);
     6a6:	20 91 8a 15 	lds	r18, 0x158A	; 0x80158a <start_x>
     6aa:	30 91 8b 15 	lds	r19, 0x158B	; 0x80158b <start_x+0x1>
	//the first parameter is the length of the letter, the second is the offset. Therefore to get the length of the letter 
	// I have to multiply by 2. 
	length_of_symbol = length_of_symbol*2; //The parameters from array_carrier in the DotFactory.h
	
	// is the length of the chosen character in the DotFactory BitMap[]. 
	int length_count = symbol_carrier[length_of_symbol+3]-symbol_carrier[length_of_symbol+1];
     6ae:	fe 01       	movw	r30, r28
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ee 5e       	subi	r30, 0xEE	; 238
     6b6:	fb 4e       	sbci	r31, 0xEB	; 235
	//is the offset of where in the DotFactory BitMap[] to read from.
	unsigned int offset_symbol = symbol_carrier[length_of_symbol+1];
	//A function to return the length of letter en whole byte
	int fixed_letter = lengthOfFixedSymbol(length_of_symbol); 	
	
	drawSymbol(symbols,fixed_letter,length_count,start_x,startY, offset_symbol);
     6b8:	40 81       	ld	r20, Z
     6ba:	51 81       	ldd	r21, Z+1	; 0x01
     6bc:	4e 19       	sub	r20, r14
     6be:	5f 09       	sbc	r21, r15
     6c0:	bc 01       	movw	r22, r24
     6c2:	82 e1       	ldi	r24, 0x12	; 18
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	4f df       	rcall	.-354    	; 0x566 <drawSymbol>
	
	//prepares the offset for next letter.
	start_x = start_x+symbol_carrier[length_of_symbol]+1; 
     6c8:	80 91 8a 15 	lds	r24, 0x158A	; 0x80158a <start_x>
     6cc:	90 91 8b 15 	lds	r25, 0x158B	; 0x80158b <start_x+0x1>
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	cc 0f       	add	r28, r28
     6d4:	dd 1f       	adc	r29, r29
     6d6:	c4 5f       	subi	r28, 0xF4	; 244
     6d8:	db 4e       	sbci	r29, 0xEB	; 235
     6da:	28 81       	ld	r18, Y
     6dc:	39 81       	ldd	r19, Y+1	; 0x01
     6de:	82 0f       	add	r24, r18
     6e0:	93 1f       	adc	r25, r19
     6e2:	90 93 8b 15 	sts	0x158B, r25	; 0x80158b <start_x+0x1>
     6e6:	80 93 8a 15 	sts	0x158A, r24	; 0x80158a <start_x>
		
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	08 95       	ret

000006f8 <writeString>:
	}
	

}

void writeString(char str[],int startx, int starty){
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	c6 5c       	subi	r28, 0xC6	; 198
     712:	d1 09       	sbc	r29, r1
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
	// temp is the maximum length of the input string 	
	int temp[99]={},i=0,j;
     71e:	fe 01       	movw	r30, r28
     720:	31 96       	adiw	r30, 0x01	; 1
     722:	26 ec       	ldi	r18, 0xC6	; 198
     724:	df 01       	movw	r26, r30
     726:	1d 92       	st	X+, r1
     728:	2a 95       	dec	r18
     72a:	e9 f7       	brne	.-6      	; 0x726 <writeString+0x2e>
	
	//the while loop puts puts the input array into a new array that has the exact length of the string
	while(str[i]!='\0') 
     72c:	fc 01       	movw	r30, r24
     72e:	20 81       	ld	r18, Z
     730:	22 23       	and	r18, r18
     732:	a1 f1       	breq	.+104    	; 0x79c <writeString+0xa4>
     734:	de 01       	movw	r26, r28
     736:	11 96       	adiw	r26, 0x01	; 1
     738:	7d 01       	movw	r14, r26
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	00 e0       	ldi	r16, 0x00	; 0
     73e:	10 e0       	ldi	r17, 0x00	; 0
	{
		temp[i]=str[i]; i++;
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	2d 93       	st	X+, r18
     744:	3d 93       	st	X+, r19
     746:	0f 5f       	subi	r16, 0xFF	; 255
     748:	1f 4f       	sbci	r17, 0xFF	; 255
void writeString(char str[],int startx, int starty){
	// temp is the maximum length of the input string 	
	int temp[99]={},i=0,j;
	
	//the while loop puts puts the input array into a new array that has the exact length of the string
	while(str[i]!='\0') 
     74a:	21 91       	ld	r18, Z+
     74c:	21 11       	cpse	r18, r1
     74e:	f8 cf       	rjmp	.-16     	; 0x740 <writeString+0x48>
	{
		temp[i]=str[i]; i++;
	}
	
	//this for loop runs through the temp array and displays one letter at the time.
	for(j=0;j<i;j++)
     750:	10 16       	cp	r1, r16
     752:	11 06       	cpc	r1, r17
     754:	1c f5       	brge	.+70     	; 0x79c <writeString+0xa4>
     756:	5a 01       	movw	r10, r20
     758:	6b 01       	movw	r12, r22
     75a:	00 0f       	add	r16, r16
     75c:	11 1f       	adc	r17, r17
     75e:	e1 e0       	ldi	r30, 0x01	; 1
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ec 0f       	add	r30, r28
     764:	fd 1f       	adc	r31, r29
     766:	0e 0f       	add	r16, r30
     768:	1f 1f       	adc	r17, r31
	{
		// temp[] -33 to make it ASCII so it fits the bitMap
		int space = temp[j]-33;
     76a:	d7 01       	movw	r26, r14
     76c:	8d 91       	ld	r24, X+
     76e:	9d 91       	ld	r25, X+
     770:	7d 01       	movw	r14, r26
     772:	81 97       	sbiw	r24, 0x21	; 33
		if (space != -1)
     774:	8f 3f       	cpi	r24, 0xFF	; 255
     776:	bf ef       	ldi	r27, 0xFF	; 255
     778:	9b 07       	cpc	r25, r27
     77a:	21 f0       	breq	.+8      	; 0x784 <writeString+0x8c>
		{
				getSymbolParameters(space,startx,starty);
     77c:	a5 01       	movw	r20, r10
     77e:	b6 01       	movw	r22, r12
     780:	70 df       	rcall	.-288    	; 0x662 <getSymbolParameters>
     782:	09 c0       	rjmp	.+18     	; 0x796 <writeString+0x9e>
		}
		else
		{
			//If space just move 6 bits on the x-axis
			start_x = start_x+6;
     784:	80 91 8a 15 	lds	r24, 0x158A	; 0x80158a <start_x>
     788:	90 91 8b 15 	lds	r25, 0x158B	; 0x80158b <start_x+0x1>
     78c:	06 96       	adiw	r24, 0x06	; 6
     78e:	90 93 8b 15 	sts	0x158B, r25	; 0x80158b <start_x+0x1>
     792:	80 93 8a 15 	sts	0x158A, r24	; 0x80158a <start_x>
	{
		temp[i]=str[i]; i++;
	}
	
	//this for loop runs through the temp array and displays one letter at the time.
	for(j=0;j<i;j++)
     796:	0e 15       	cp	r16, r14
     798:	1f 05       	cpc	r17, r15
     79a:	39 f7       	brne	.-50     	; 0x76a <writeString+0x72>
			//If space just move 6 bits on the x-axis
			start_x = start_x+6;
		}
	}
	return 0;
}
     79c:	ca 53       	subi	r28, 0x3A	; 58
     79e:	df 4f       	sbci	r29, 0xFF	; 255
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	08 95       	ret

000007c0 <writeInt>:

void writeInt(long int num, int startX, int startY){
     7c0:	2f 92       	push	r2
     7c2:	3f 92       	push	r3
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2c 97       	sbiw	r28, 0x0c	; 12
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	4b 01       	movw	r8, r22
     7f6:	5c 01       	movw	r10, r24
     7f8:	6a 01       	movw	r12, r20
     7fa:	19 01       	movw	r2, r18
	// sets num flag
	int num_flag = 0;
	
	//maximum size of a number (999999)
	int number[6] = {num % 10 , (num/10) % 10 , (num/100) % 10 , (num/1000) % 10 , (num/10000) % 10 , (num/100000) % 10};
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fa e0       	ldi	r31, 0x0A	; 10
     800:	4f 2e       	mov	r4, r31
     802:	51 2c       	mov	r5, r1
     804:	61 2c       	mov	r6, r1
     806:	71 2c       	mov	r7, r1
     808:	f0 2d       	mov	r31, r0
     80a:	a3 01       	movw	r20, r6
     80c:	92 01       	movw	r18, r4
     80e:	f5 d3       	rcall	.+2026   	; 0xffa <__divmodsi4>
     810:	7a 83       	std	Y+2, r23	; 0x02
     812:	69 83       	std	Y+1, r22	; 0x01
     814:	ca 01       	movw	r24, r20
     816:	b9 01       	movw	r22, r18
     818:	a3 01       	movw	r20, r6
     81a:	92 01       	movw	r18, r4
     81c:	ee d3       	rcall	.+2012   	; 0xffa <__divmodsi4>
     81e:	7c 83       	std	Y+4, r23	; 0x04
     820:	6b 83       	std	Y+3, r22	; 0x03
     822:	c5 01       	movw	r24, r10
     824:	b4 01       	movw	r22, r8
     826:	24 e6       	ldi	r18, 0x64	; 100
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	e5 d3       	rcall	.+1994   	; 0xffa <__divmodsi4>
     830:	ca 01       	movw	r24, r20
     832:	b9 01       	movw	r22, r18
     834:	a3 01       	movw	r20, r6
     836:	92 01       	movw	r18, r4
     838:	e0 d3       	rcall	.+1984   	; 0xffa <__divmodsi4>
     83a:	7e 83       	std	Y+6, r23	; 0x06
     83c:	6d 83       	std	Y+5, r22	; 0x05
     83e:	c5 01       	movw	r24, r10
     840:	b4 01       	movw	r22, r8
     842:	28 ee       	ldi	r18, 0xE8	; 232
     844:	33 e0       	ldi	r19, 0x03	; 3
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	d7 d3       	rcall	.+1966   	; 0xffa <__divmodsi4>
     84c:	ca 01       	movw	r24, r20
     84e:	b9 01       	movw	r22, r18
     850:	a3 01       	movw	r20, r6
     852:	92 01       	movw	r18, r4
     854:	d2 d3       	rcall	.+1956   	; 0xffa <__divmodsi4>
     856:	78 87       	std	Y+8, r23	; 0x08
     858:	6f 83       	std	Y+7, r22	; 0x07
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	20 e1       	ldi	r18, 0x10	; 16
     860:	37 e2       	ldi	r19, 0x27	; 39
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	c9 d3       	rcall	.+1938   	; 0xffa <__divmodsi4>
     868:	ca 01       	movw	r24, r20
     86a:	b9 01       	movw	r22, r18
     86c:	a3 01       	movw	r20, r6
     86e:	92 01       	movw	r18, r4
     870:	c4 d3       	rcall	.+1928   	; 0xffa <__divmodsi4>
     872:	7a 87       	std	Y+10, r23	; 0x0a
     874:	69 87       	std	Y+9, r22	; 0x09
     876:	c5 01       	movw	r24, r10
     878:	b4 01       	movw	r22, r8
     87a:	20 ea       	ldi	r18, 0xA0	; 160
     87c:	36 e8       	ldi	r19, 0x86	; 134
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	bb d3       	rcall	.+1910   	; 0xffa <__divmodsi4>
     884:	ca 01       	movw	r24, r20
     886:	b9 01       	movw	r22, r18
     888:	a3 01       	movw	r20, r6
     88a:	92 01       	movw	r18, r4
     88c:	b6 d3       	rcall	.+1900   	; 0xffa <__divmodsi4>
     88e:	7c 87       	std	Y+12, r23	; 0x0c
     890:	6b 87       	std	Y+11, r22	; 0x0b
     892:	8e 01       	movw	r16, r28
     894:	03 5f       	subi	r16, 0xF3	; 243
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	7c 01       	movw	r14, r24
	return 0;
}

void writeInt(long int num, int startX, int startY){
	// sets num flag
	int num_flag = 0;
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0

	//This for loop displays the number as MSB first, if the number is 0 and the num falg hasn't been set
	//it ignores that number and moves on the the next.
	for (int i = 5; i >= 0; i--)
	{
		if (number[i] != 0 | num_flag == 1 )
     8a2:	99 24       	eor	r9, r9
     8a4:	93 94       	inc	r9
     8a6:	81 2c       	mov	r8, r1
		{
			//number[i]+15 to make it fir the bit map.
			getSymbolParameters(number[i]+15,startX,startY);
			num_flag = 1;
     8a8:	66 24       	eor	r6, r6
     8aa:	63 94       	inc	r6
     8ac:	71 2c       	mov	r7, r1

	//This for loop displays the number as MSB first, if the number is 0 and the num falg hasn't been set
	//it ignores that number and moves on the the next.
	for (int i = 5; i >= 0; i--)
	{
		if (number[i] != 0 | num_flag == 1 )
     8ae:	f8 01       	movw	r30, r16
     8b0:	32 91       	ld	r19, -Z
     8b2:	22 91       	ld	r18, -Z
     8b4:	8f 01       	movw	r16, r30
     8b6:	99 2d       	mov	r25, r9
     8b8:	21 15       	cp	r18, r1
     8ba:	31 05       	cpc	r19, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <writeInt+0x100>
     8be:	98 2d       	mov	r25, r8
     8c0:	91 11       	cpse	r25, r1
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <writeInt+0x112>
     8c4:	99 2d       	mov	r25, r9
     8c6:	41 30       	cpi	r20, 0x01	; 1
     8c8:	51 05       	cpc	r21, r1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <writeInt+0x10e>
     8cc:	98 2d       	mov	r25, r8
     8ce:	99 23       	and	r25, r25
		{
			//number[i]+15 to make it fir the bit map.
			getSymbolParameters(number[i]+15,startX,startY);
     8d0:	39 f0       	breq	.+14     	; 0x8e0 <writeInt+0x120>
     8d2:	a1 01       	movw	r20, r2
     8d4:	b6 01       	movw	r22, r12
     8d6:	c9 01       	movw	r24, r18
     8d8:	0f 96       	adiw	r24, 0x0f	; 15
     8da:	c3 de       	rcall	.-634    	; 0x662 <getSymbolParameters>
			num_flag = 1;
     8dc:	46 2d       	mov	r20, r6
     8de:	57 2d       	mov	r21, r7
	//maximum size of a number (999999)
	int number[6] = {num % 10 , (num/10) % 10 , (num/100) % 10 , (num/1000) % 10 , (num/10000) % 10 , (num/100000) % 10};

	//This for loop displays the number as MSB first, if the number is 0 and the num falg hasn't been set
	//it ignores that number and moves on the the next.
	for (int i = 5; i >= 0; i--)
     8e0:	0e 15       	cp	r16, r14
     8e2:	1f 05       	cpc	r17, r15
     8e4:	21 f7       	brne	.-56     	; 0x8ae <writeInt+0xee>
			//number[i]+15 to make it fir the bit map.
			getSymbolParameters(number[i]+15,startX,startY);
			num_flag = 1;
		}
	}
	start_x = startX;
     8e6:	d0 92 8b 15 	sts	0x158B, r13	; 0x80158b <start_x+0x1>
     8ea:	c0 92 8a 15 	sts	0x158A, r12	; 0x80158a <start_x>

}
     8ee:	2c 96       	adiw	r28, 0x0c	; 12
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	9f 90       	pop	r9
     910:	8f 90       	pop	r8
     912:	7f 90       	pop	r7
     914:	6f 90       	pop	r6
     916:	5f 90       	pop	r5
     918:	4f 90       	pop	r4
     91a:	3f 90       	pop	r3
     91c:	2f 90       	pop	r2
     91e:	08 95       	ret

00000920 <drawRed>:

void drawRed(int count, int height, int realHeight){
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	ef 92       	push	r14
     928:	0f 93       	push	r16
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	eb 01       	movw	r28, r22
     930:	5a 01       	movw	r10, r20
	int _realHeight = 139 - realHeight;
	writeInt(count,140,60+_realHeight);
     932:	27 ec       	ldi	r18, 0xC7	; 199
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	24 1b       	sub	r18, r20
     938:	35 0b       	sbc	r19, r21
     93a:	bc 01       	movw	r22, r24
     93c:	99 0f       	add	r25, r25
     93e:	88 0b       	sbc	r24, r24
     940:	99 0b       	sbc	r25, r25
     942:	4c e8       	ldi	r20, 0x8C	; 140
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	3c df       	rcall	.-392    	; 0x7c0 <writeInt>
	FillRectangle(130,100+_realHeight,50,height-_realHeight,31,31,63);
     948:	ca 0d       	add	r28, r10
     94a:	db 1d       	adc	r29, r11
     94c:	cb 58       	subi	r28, 0x8B	; 139
     94e:	d1 09       	sbc	r29, r1
     950:	8f ee       	ldi	r24, 0xEF	; 239
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 01       	movw	r18, r24
     956:	2a 19       	sub	r18, r10
     958:	3b 09       	sbc	r19, r11
     95a:	59 01       	movw	r10, r18
     95c:	0f 2e       	mov	r0, r31
     95e:	ff e3       	ldi	r31, 0x3F	; 63
     960:	cf 2e       	mov	r12, r31
     962:	f0 2d       	mov	r31, r0
     964:	0f 2e       	mov	r0, r31
     966:	ff e1       	ldi	r31, 0x1F	; 31
     968:	ef 2e       	mov	r14, r31
     96a:	f0 2d       	mov	r31, r0
     96c:	0f e1       	ldi	r16, 0x1F	; 31
     96e:	9e 01       	movw	r18, r28
     970:	42 e3       	ldi	r20, 0x32	; 50
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	b5 01       	movw	r22, r10
     976:	82 e8       	ldi	r24, 0x82	; 130
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	95 dd       	rcall	.-1238   	; 0x4a6 <FillRectangle>
	FillRectangle(130,100+_realHeight,50,height-_realHeight,31,0,0);
     97c:	c1 2c       	mov	r12, r1
     97e:	e1 2c       	mov	r14, r1
     980:	9e 01       	movw	r18, r28
     982:	42 e3       	ldi	r20, 0x32	; 50
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	b5 01       	movw	r22, r10
     988:	82 e8       	ldi	r24, 0x82	; 130
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	8c dd       	rcall	.-1256   	; 0x4a6 <FillRectangle>
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	0f 91       	pop	r16
     994:	ef 90       	pop	r14
     996:	cf 90       	pop	r12
     998:	bf 90       	pop	r11
     99a:	af 90       	pop	r10
     99c:	08 95       	ret

0000099e <drawGreen>:

void drawGreen(int count, int height, int realHeight){
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	ef 92       	push	r14
     9a6:	0f 93       	push	r16
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	eb 01       	movw	r28, r22
     9ae:	5a 01       	movw	r10, r20
	int _realHeight = 139 - realHeight;
	writeInt(count,40,60+_realHeight);
     9b0:	27 ec       	ldi	r18, 0xC7	; 199
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	24 1b       	sub	r18, r20
     9b6:	35 0b       	sbc	r19, r21
     9b8:	bc 01       	movw	r22, r24
     9ba:	99 0f       	add	r25, r25
     9bc:	88 0b       	sbc	r24, r24
     9be:	99 0b       	sbc	r25, r25
     9c0:	48 e2       	ldi	r20, 0x28	; 40
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	fd de       	rcall	.-518    	; 0x7c0 <writeInt>
	FillRectangle(30,100+_realHeight,50,height-_realHeight,31,31,63);
     9c6:	ca 0d       	add	r28, r10
     9c8:	db 1d       	adc	r29, r11
     9ca:	cb 58       	subi	r28, 0x8B	; 139
     9cc:	d1 09       	sbc	r29, r1
     9ce:	8f ee       	ldi	r24, 0xEF	; 239
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	9c 01       	movw	r18, r24
     9d4:	2a 19       	sub	r18, r10
     9d6:	3b 09       	sbc	r19, r11
     9d8:	59 01       	movw	r10, r18
     9da:	0f 2e       	mov	r0, r31
     9dc:	ff e3       	ldi	r31, 0x3F	; 63
     9de:	cf 2e       	mov	r12, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	0f 2e       	mov	r0, r31
     9e4:	ff e1       	ldi	r31, 0x1F	; 31
     9e6:	ef 2e       	mov	r14, r31
     9e8:	f0 2d       	mov	r31, r0
     9ea:	0f e1       	ldi	r16, 0x1F	; 31
     9ec:	9e 01       	movw	r18, r28
     9ee:	42 e3       	ldi	r20, 0x32	; 50
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	b5 01       	movw	r22, r10
     9f4:	8e e1       	ldi	r24, 0x1E	; 30
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	56 dd       	rcall	.-1364   	; 0x4a6 <FillRectangle>
	FillRectangle(30,100+_realHeight,50,height-_realHeight,0,31,0);
     9fa:	c1 2c       	mov	r12, r1
     9fc:	00 e0       	ldi	r16, 0x00	; 0
     9fe:	9e 01       	movw	r18, r28
     a00:	42 e3       	ldi	r20, 0x32	; 50
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	b5 01       	movw	r22, r10
     a06:	8e e1       	ldi	r24, 0x1E	; 30
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	4d dd       	rcall	.-1382   	; 0x4a6 <FillRectangle>
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	0f 91       	pop	r16
     a12:	ef 90       	pop	r14
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	08 95       	ret

00000a1c <drawBlue>:

void drawBlue(int count, int height, int realHeight){
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	ef 92       	push	r14
     a24:	0f 93       	push	r16
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	eb 01       	movw	r28, r22
     a2c:	5a 01       	movw	r10, r20
	int _realHeight = 139 - realHeight;
	writeInt(count,240,60+_realHeight);
     a2e:	27 ec       	ldi	r18, 0xC7	; 199
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	24 1b       	sub	r18, r20
     a34:	35 0b       	sbc	r19, r21
     a36:	bc 01       	movw	r22, r24
     a38:	99 0f       	add	r25, r25
     a3a:	88 0b       	sbc	r24, r24
     a3c:	99 0b       	sbc	r25, r25
     a3e:	40 ef       	ldi	r20, 0xF0	; 240
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	be de       	rcall	.-644    	; 0x7c0 <writeInt>
	FillRectangle(230,100+_realHeight,50,height-_realHeight,31,31,63);
     a44:	ca 0d       	add	r28, r10
     a46:	db 1d       	adc	r29, r11
     a48:	cb 58       	subi	r28, 0x8B	; 139
     a4a:	d1 09       	sbc	r29, r1
     a4c:	8f ee       	ldi	r24, 0xEF	; 239
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	9c 01       	movw	r18, r24
     a52:	2a 19       	sub	r18, r10
     a54:	3b 09       	sbc	r19, r11
     a56:	59 01       	movw	r10, r18
     a58:	0f 2e       	mov	r0, r31
     a5a:	ff e3       	ldi	r31, 0x3F	; 63
     a5c:	cf 2e       	mov	r12, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	0f 2e       	mov	r0, r31
     a62:	ff e1       	ldi	r31, 0x1F	; 31
     a64:	ef 2e       	mov	r14, r31
     a66:	f0 2d       	mov	r31, r0
     a68:	0f e1       	ldi	r16, 0x1F	; 31
     a6a:	9e 01       	movw	r18, r28
     a6c:	42 e3       	ldi	r20, 0x32	; 50
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	b5 01       	movw	r22, r10
     a72:	86 ee       	ldi	r24, 0xE6	; 230
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	17 dd       	rcall	.-1490   	; 0x4a6 <FillRectangle>
	FillRectangle(230,100+_realHeight,50,height-_realHeight,0,0,31);
     a78:	0f 2e       	mov	r0, r31
     a7a:	ff e1       	ldi	r31, 0x1F	; 31
     a7c:	cf 2e       	mov	r12, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	e1 2c       	mov	r14, r1
     a82:	00 e0       	ldi	r16, 0x00	; 0
     a84:	9e 01       	movw	r18, r28
     a86:	42 e3       	ldi	r20, 0x32	; 50
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	b5 01       	movw	r22, r10
     a8c:	86 ee       	ldi	r24, 0xE6	; 230
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0a dd       	rcall	.-1516   	; 0x4a6 <FillRectangle>
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	0f 91       	pop	r16
     a98:	ef 90       	pop	r14
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	08 95       	ret

00000aa2 <drawTotal>:

void drawTotal(float Red, float Green, float Blue){
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	2c 97       	sbiw	r28, 0x0c	; 12
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	2b 01       	movw	r4, r22
     ad4:	3c 01       	movw	r6, r24
     ad6:	29 83       	std	Y+1, r18	; 0x01
     ad8:	3a 83       	std	Y+2, r19	; 0x02
     ada:	4b 83       	std	Y+3, r20	; 0x03
     adc:	5c 83       	std	Y+4, r21	; 0x04
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
	int totalCount = Red + Green + Blue;
     ae6:	79 d0       	rcall	.+242    	; 0xbda <__addsf3>
     ae8:	a8 01       	movw	r20, r16
     aea:	97 01       	movw	r18, r14
     aec:	76 d0       	rcall	.+236    	; 0xbda <__addsf3>
     aee:	41 d1       	rcall	.+642    	; 0xd72 <__fixsfsi>
	
	int heightRed = (Red/totalCount)*139;
     af0:	6b 01       	movw	r12, r22
     af2:	77 0f       	add	r23, r23
     af4:	ee 08       	sbc	r14, r14
     af6:	ff 08       	sbc	r15, r15
     af8:	c7 01       	movw	r24, r14
     afa:	b6 01       	movw	r22, r12
     afc:	6d d1       	rcall	.+730    	; 0xdd8 <__floatsisf>
     afe:	4b 01       	movw	r8, r22
     b00:	5c 01       	movw	r10, r24
	int heightGreen = (Green/totalCount)*139;
	int heightBlue = (Blue/totalCount)*139;
	
	
	
	drawRed(Red, 139, heightRed);
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	c3 01       	movw	r24, r6
     b08:	b2 01       	movw	r22, r4
     b0a:	cb d0       	rcall	.+406    	; 0xca2 <__divsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	4b e0       	ldi	r20, 0x0B	; 11
     b12:	53 e4       	ldi	r21, 0x43	; 67
     b14:	ed d1       	rcall	.+986    	; 0xef0 <__mulsf3>
     b16:	2d d1       	rcall	.+602    	; 0xd72 <__fixsfsi>
     b18:	69 87       	std	Y+9, r22	; 0x09
     b1a:	7a 87       	std	Y+10, r23	; 0x0a
     b1c:	8b 87       	std	Y+11, r24	; 0x0b
     b1e:	9c 87       	std	Y+12, r25	; 0x0c
     b20:	c3 01       	movw	r24, r6
     b22:	b2 01       	movw	r22, r4
     b24:	26 d1       	rcall	.+588    	; 0xd72 <__fixsfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	49 85       	ldd	r20, Y+9	; 0x09
     b2c:	5a 85       	ldd	r21, Y+10	; 0x0a
     b2e:	6b e8       	ldi	r22, 0x8B	; 139
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	f6 de       	rcall	.-532    	; 0x920 <drawRed>
	drawGreen(Green, 139, heightGreen);
     b34:	a5 01       	movw	r20, r10
     b36:	94 01       	movw	r18, r8
     b38:	69 81       	ldd	r22, Y+1	; 0x01
     b3a:	7a 81       	ldd	r23, Y+2	; 0x02
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	b0 d0       	rcall	.+352    	; 0xca2 <__divsf3>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	4b e0       	ldi	r20, 0x0B	; 11
     b48:	53 e4       	ldi	r21, 0x43	; 67
     b4a:	d2 d1       	rcall	.+932    	; 0xef0 <__mulsf3>
     b4c:	12 d1       	rcall	.+548    	; 0xd72 <__fixsfsi>
     b4e:	2b 01       	movw	r4, r22
     b50:	3c 01       	movw	r6, r24
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	0b d1       	rcall	.+534    	; 0xd72 <__fixsfsi>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	a2 01       	movw	r20, r4
     b62:	6b e8       	ldi	r22, 0x8B	; 139
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	1b df       	rcall	.-458    	; 0x99e <drawGreen>
	drawBlue(Blue, 139, heightBlue);
     b68:	a5 01       	movw	r20, r10
     b6a:	94 01       	movw	r18, r8
     b6c:	6d 81       	ldd	r22, Y+5	; 0x05
     b6e:	7e 81       	ldd	r23, Y+6	; 0x06
     b70:	8f 81       	ldd	r24, Y+7	; 0x07
     b72:	98 85       	ldd	r25, Y+8	; 0x08
     b74:	96 d0       	rcall	.+300    	; 0xca2 <__divsf3>
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4b e0       	ldi	r20, 0x0B	; 11
     b7c:	53 e4       	ldi	r21, 0x43	; 67
     b7e:	b8 d1       	rcall	.+880    	; 0xef0 <__mulsf3>
     b80:	f8 d0       	rcall	.+496    	; 0xd72 <__fixsfsi>
     b82:	4b 01       	movw	r8, r22
     b84:	5c 01       	movw	r10, r24
     b86:	6d 81       	ldd	r22, Y+5	; 0x05
     b88:	7e 81       	ldd	r23, Y+6	; 0x06
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	f1 d0       	rcall	.+482    	; 0xd72 <__fixsfsi>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	a4 01       	movw	r20, r8
     b96:	6b e8       	ldi	r22, 0x8B	; 139
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	40 df       	rcall	.-384    	; 0xa1c <drawBlue>
     b9c:	2a e0       	ldi	r18, 0x0A	; 10
     b9e:	30 e0       	ldi	r19, 0x00	; 0
	
	writeInt(totalCount, 250, 10);
     ba0:	4a ef       	ldi	r20, 0xFA	; 250
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0b de       	rcall	.-1002   	; 0x7c0 <writeInt>
     baa:	2c 96       	adiw	r28, 0x0c	; 12
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
	
}
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	8f 90       	pop	r8
     bce:	7f 90       	pop	r7
     bd0:	6f 90       	pop	r6
     bd2:	5f 90       	pop	r5
     bd4:	4f 90       	pop	r4
     bd6:	08 95       	ret

00000bd8 <__subsf3>:
     bd8:	50 58       	subi	r21, 0x80	; 128

00000bda <__addsf3>:
     bda:	bb 27       	eor	r27, r27
     bdc:	aa 27       	eor	r26, r26
     bde:	0e d0       	rcall	.+28     	; 0xbfc <__addsf3x>
     be0:	4d c1       	rjmp	.+666    	; 0xe7c <__fp_round>
     be2:	3e d1       	rcall	.+636    	; 0xe60 <__fp_pscA>
     be4:	30 f0       	brcs	.+12     	; 0xbf2 <__addsf3+0x18>
     be6:	43 d1       	rcall	.+646    	; 0xe6e <__fp_pscB>
     be8:	20 f0       	brcs	.+8      	; 0xbf2 <__addsf3+0x18>
     bea:	31 f4       	brne	.+12     	; 0xbf8 <__addsf3+0x1e>
     bec:	9f 3f       	cpi	r25, 0xFF	; 255
     bee:	11 f4       	brne	.+4      	; 0xbf4 <__addsf3+0x1a>
     bf0:	1e f4       	brtc	.+6      	; 0xbf8 <__addsf3+0x1e>
     bf2:	33 c1       	rjmp	.+614    	; 0xe5a <__fp_nan>
     bf4:	0e f4       	brtc	.+2      	; 0xbf8 <__addsf3+0x1e>
     bf6:	e0 95       	com	r30
     bf8:	e7 fb       	bst	r30, 7
     bfa:	29 c1       	rjmp	.+594    	; 0xe4e <__fp_inf>

00000bfc <__addsf3x>:
     bfc:	e9 2f       	mov	r30, r25
     bfe:	4f d1       	rcall	.+670    	; 0xe9e <__fp_split3>
     c00:	80 f3       	brcs	.-32     	; 0xbe2 <__addsf3+0x8>
     c02:	ba 17       	cp	r27, r26
     c04:	62 07       	cpc	r22, r18
     c06:	73 07       	cpc	r23, r19
     c08:	84 07       	cpc	r24, r20
     c0a:	95 07       	cpc	r25, r21
     c0c:	18 f0       	brcs	.+6      	; 0xc14 <__addsf3x+0x18>
     c0e:	71 f4       	brne	.+28     	; 0xc2c <__addsf3x+0x30>
     c10:	9e f5       	brtc	.+102    	; 0xc78 <__addsf3x+0x7c>
     c12:	67 c1       	rjmp	.+718    	; 0xee2 <__fp_zero>
     c14:	0e f4       	brtc	.+2      	; 0xc18 <__addsf3x+0x1c>
     c16:	e0 95       	com	r30
     c18:	0b 2e       	mov	r0, r27
     c1a:	ba 2f       	mov	r27, r26
     c1c:	a0 2d       	mov	r26, r0
     c1e:	0b 01       	movw	r0, r22
     c20:	b9 01       	movw	r22, r18
     c22:	90 01       	movw	r18, r0
     c24:	0c 01       	movw	r0, r24
     c26:	ca 01       	movw	r24, r20
     c28:	a0 01       	movw	r20, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	ff 27       	eor	r31, r31
     c2e:	59 1b       	sub	r21, r25
     c30:	99 f0       	breq	.+38     	; 0xc58 <__addsf3x+0x5c>
     c32:	59 3f       	cpi	r21, 0xF9	; 249
     c34:	50 f4       	brcc	.+20     	; 0xc4a <__addsf3x+0x4e>
     c36:	50 3e       	cpi	r21, 0xE0	; 224
     c38:	68 f1       	brcs	.+90     	; 0xc94 <__addsf3x+0x98>
     c3a:	1a 16       	cp	r1, r26
     c3c:	f0 40       	sbci	r31, 0x00	; 0
     c3e:	a2 2f       	mov	r26, r18
     c40:	23 2f       	mov	r18, r19
     c42:	34 2f       	mov	r19, r20
     c44:	44 27       	eor	r20, r20
     c46:	58 5f       	subi	r21, 0xF8	; 248
     c48:	f3 cf       	rjmp	.-26     	; 0xc30 <__addsf3x+0x34>
     c4a:	46 95       	lsr	r20
     c4c:	37 95       	ror	r19
     c4e:	27 95       	ror	r18
     c50:	a7 95       	ror	r26
     c52:	f0 40       	sbci	r31, 0x00	; 0
     c54:	53 95       	inc	r21
     c56:	c9 f7       	brne	.-14     	; 0xc4a <__addsf3x+0x4e>
     c58:	7e f4       	brtc	.+30     	; 0xc78 <__addsf3x+0x7c>
     c5a:	1f 16       	cp	r1, r31
     c5c:	ba 0b       	sbc	r27, r26
     c5e:	62 0b       	sbc	r22, r18
     c60:	73 0b       	sbc	r23, r19
     c62:	84 0b       	sbc	r24, r20
     c64:	ba f0       	brmi	.+46     	; 0xc94 <__addsf3x+0x98>
     c66:	91 50       	subi	r25, 0x01	; 1
     c68:	a1 f0       	breq	.+40     	; 0xc92 <__addsf3x+0x96>
     c6a:	ff 0f       	add	r31, r31
     c6c:	bb 1f       	adc	r27, r27
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	88 1f       	adc	r24, r24
     c74:	c2 f7       	brpl	.-16     	; 0xc66 <__addsf3x+0x6a>
     c76:	0e c0       	rjmp	.+28     	; 0xc94 <__addsf3x+0x98>
     c78:	ba 0f       	add	r27, r26
     c7a:	62 1f       	adc	r22, r18
     c7c:	73 1f       	adc	r23, r19
     c7e:	84 1f       	adc	r24, r20
     c80:	48 f4       	brcc	.+18     	; 0xc94 <__addsf3x+0x98>
     c82:	87 95       	ror	r24
     c84:	77 95       	ror	r23
     c86:	67 95       	ror	r22
     c88:	b7 95       	ror	r27
     c8a:	f7 95       	ror	r31
     c8c:	9e 3f       	cpi	r25, 0xFE	; 254
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__addsf3x+0x96>
     c90:	b3 cf       	rjmp	.-154    	; 0xbf8 <__addsf3+0x1e>
     c92:	93 95       	inc	r25
     c94:	88 0f       	add	r24, r24
     c96:	08 f0       	brcs	.+2      	; 0xc9a <__addsf3x+0x9e>
     c98:	99 27       	eor	r25, r25
     c9a:	ee 0f       	add	r30, r30
     c9c:	97 95       	ror	r25
     c9e:	87 95       	ror	r24
     ca0:	08 95       	ret

00000ca2 <__divsf3>:
     ca2:	0c d0       	rcall	.+24     	; 0xcbc <__divsf3x>
     ca4:	eb c0       	rjmp	.+470    	; 0xe7c <__fp_round>
     ca6:	e3 d0       	rcall	.+454    	; 0xe6e <__fp_pscB>
     ca8:	40 f0       	brcs	.+16     	; 0xcba <__divsf3+0x18>
     caa:	da d0       	rcall	.+436    	; 0xe60 <__fp_pscA>
     cac:	30 f0       	brcs	.+12     	; 0xcba <__divsf3+0x18>
     cae:	21 f4       	brne	.+8      	; 0xcb8 <__divsf3+0x16>
     cb0:	5f 3f       	cpi	r21, 0xFF	; 255
     cb2:	19 f0       	breq	.+6      	; 0xcba <__divsf3+0x18>
     cb4:	cc c0       	rjmp	.+408    	; 0xe4e <__fp_inf>
     cb6:	51 11       	cpse	r21, r1
     cb8:	15 c1       	rjmp	.+554    	; 0xee4 <__fp_szero>
     cba:	cf c0       	rjmp	.+414    	; 0xe5a <__fp_nan>

00000cbc <__divsf3x>:
     cbc:	f0 d0       	rcall	.+480    	; 0xe9e <__fp_split3>
     cbe:	98 f3       	brcs	.-26     	; 0xca6 <__divsf3+0x4>

00000cc0 <__divsf3_pse>:
     cc0:	99 23       	and	r25, r25
     cc2:	c9 f3       	breq	.-14     	; 0xcb6 <__divsf3+0x14>
     cc4:	55 23       	and	r21, r21
     cc6:	b1 f3       	breq	.-20     	; 0xcb4 <__divsf3+0x12>
     cc8:	95 1b       	sub	r25, r21
     cca:	55 0b       	sbc	r21, r21
     ccc:	bb 27       	eor	r27, r27
     cce:	aa 27       	eor	r26, r26
     cd0:	62 17       	cp	r22, r18
     cd2:	73 07       	cpc	r23, r19
     cd4:	84 07       	cpc	r24, r20
     cd6:	38 f0       	brcs	.+14     	; 0xce6 <__divsf3_pse+0x26>
     cd8:	9f 5f       	subi	r25, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	aa 1f       	adc	r26, r26
     ce4:	a9 f3       	breq	.-22     	; 0xcd0 <__divsf3_pse+0x10>
     ce6:	33 d0       	rcall	.+102    	; 0xd4e <__divsf3_pse+0x8e>
     ce8:	0e 2e       	mov	r0, r30
     cea:	3a f0       	brmi	.+14     	; 0xcfa <__divsf3_pse+0x3a>
     cec:	e0 e8       	ldi	r30, 0x80	; 128
     cee:	30 d0       	rcall	.+96     	; 0xd50 <__divsf3_pse+0x90>
     cf0:	91 50       	subi	r25, 0x01	; 1
     cf2:	50 40       	sbci	r21, 0x00	; 0
     cf4:	e6 95       	lsr	r30
     cf6:	00 1c       	adc	r0, r0
     cf8:	ca f7       	brpl	.-14     	; 0xcec <__divsf3_pse+0x2c>
     cfa:	29 d0       	rcall	.+82     	; 0xd4e <__divsf3_pse+0x8e>
     cfc:	fe 2f       	mov	r31, r30
     cfe:	27 d0       	rcall	.+78     	; 0xd4e <__divsf3_pse+0x8e>
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	bb 1f       	adc	r27, r27
     d08:	26 17       	cp	r18, r22
     d0a:	37 07       	cpc	r19, r23
     d0c:	48 07       	cpc	r20, r24
     d0e:	ab 07       	cpc	r26, r27
     d10:	b0 e8       	ldi	r27, 0x80	; 128
     d12:	09 f0       	breq	.+2      	; 0xd16 <__divsf3_pse+0x56>
     d14:	bb 0b       	sbc	r27, r27
     d16:	80 2d       	mov	r24, r0
     d18:	bf 01       	movw	r22, r30
     d1a:	ff 27       	eor	r31, r31
     d1c:	93 58       	subi	r25, 0x83	; 131
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	2a f0       	brmi	.+10     	; 0xd2c <__divsf3_pse+0x6c>
     d22:	9e 3f       	cpi	r25, 0xFE	; 254
     d24:	51 05       	cpc	r21, r1
     d26:	68 f0       	brcs	.+26     	; 0xd42 <__divsf3_pse+0x82>
     d28:	92 c0       	rjmp	.+292    	; 0xe4e <__fp_inf>
     d2a:	dc c0       	rjmp	.+440    	; 0xee4 <__fp_szero>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	ec f3       	brlt	.-6      	; 0xd2a <__divsf3_pse+0x6a>
     d30:	98 3e       	cpi	r25, 0xE8	; 232
     d32:	dc f3       	brlt	.-10     	; 0xd2a <__divsf3_pse+0x6a>
     d34:	86 95       	lsr	r24
     d36:	77 95       	ror	r23
     d38:	67 95       	ror	r22
     d3a:	b7 95       	ror	r27
     d3c:	f7 95       	ror	r31
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	c9 f7       	brne	.-14     	; 0xd34 <__divsf3_pse+0x74>
     d42:	88 0f       	add	r24, r24
     d44:	91 1d       	adc	r25, r1
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	97 f9       	bld	r25, 7
     d4c:	08 95       	ret
     d4e:	e1 e0       	ldi	r30, 0x01	; 1
     d50:	66 0f       	add	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	bb 1f       	adc	r27, r27
     d58:	62 17       	cp	r22, r18
     d5a:	73 07       	cpc	r23, r19
     d5c:	84 07       	cpc	r24, r20
     d5e:	ba 07       	cpc	r27, r26
     d60:	20 f0       	brcs	.+8      	; 0xd6a <__divsf3_pse+0xaa>
     d62:	62 1b       	sub	r22, r18
     d64:	73 0b       	sbc	r23, r19
     d66:	84 0b       	sbc	r24, r20
     d68:	ba 0b       	sbc	r27, r26
     d6a:	ee 1f       	adc	r30, r30
     d6c:	88 f7       	brcc	.-30     	; 0xd50 <__divsf3_pse+0x90>
     d6e:	e0 95       	com	r30
     d70:	08 95       	ret

00000d72 <__fixsfsi>:
     d72:	04 d0       	rcall	.+8      	; 0xd7c <__fixunssfsi>
     d74:	68 94       	set
     d76:	b1 11       	cpse	r27, r1
     d78:	b5 c0       	rjmp	.+362    	; 0xee4 <__fp_szero>
     d7a:	08 95       	ret

00000d7c <__fixunssfsi>:
     d7c:	98 d0       	rcall	.+304    	; 0xeae <__fp_splitA>
     d7e:	88 f0       	brcs	.+34     	; 0xda2 <__fixunssfsi+0x26>
     d80:	9f 57       	subi	r25, 0x7F	; 127
     d82:	90 f0       	brcs	.+36     	; 0xda8 <__fixunssfsi+0x2c>
     d84:	b9 2f       	mov	r27, r25
     d86:	99 27       	eor	r25, r25
     d88:	b7 51       	subi	r27, 0x17	; 23
     d8a:	a0 f0       	brcs	.+40     	; 0xdb4 <__fixunssfsi+0x38>
     d8c:	d1 f0       	breq	.+52     	; 0xdc2 <__fixunssfsi+0x46>
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	1a f0       	brmi	.+6      	; 0xd9e <__fixunssfsi+0x22>
     d98:	ba 95       	dec	r27
     d9a:	c9 f7       	brne	.-14     	; 0xd8e <__fixunssfsi+0x12>
     d9c:	12 c0       	rjmp	.+36     	; 0xdc2 <__fixunssfsi+0x46>
     d9e:	b1 30       	cpi	r27, 0x01	; 1
     da0:	81 f0       	breq	.+32     	; 0xdc2 <__fixunssfsi+0x46>
     da2:	9f d0       	rcall	.+318    	; 0xee2 <__fp_zero>
     da4:	b1 e0       	ldi	r27, 0x01	; 1
     da6:	08 95       	ret
     da8:	9c c0       	rjmp	.+312    	; 0xee2 <__fp_zero>
     daa:	67 2f       	mov	r22, r23
     dac:	78 2f       	mov	r23, r24
     dae:	88 27       	eor	r24, r24
     db0:	b8 5f       	subi	r27, 0xF8	; 248
     db2:	39 f0       	breq	.+14     	; 0xdc2 <__fixunssfsi+0x46>
     db4:	b9 3f       	cpi	r27, 0xF9	; 249
     db6:	cc f3       	brlt	.-14     	; 0xdaa <__fixunssfsi+0x2e>
     db8:	86 95       	lsr	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b3 95       	inc	r27
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <__fixunssfsi+0x3c>
     dc2:	3e f4       	brtc	.+14     	; 0xdd2 <__fixunssfsi+0x56>
     dc4:	90 95       	com	r25
     dc6:	80 95       	com	r24
     dc8:	70 95       	com	r23
     dca:	61 95       	neg	r22
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	08 95       	ret

00000dd4 <__floatunsisf>:
     dd4:	e8 94       	clt
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <__floatsisf+0x12>

00000dd8 <__floatsisf>:
     dd8:	97 fb       	bst	r25, 7
     dda:	3e f4       	brtc	.+14     	; 0xdea <__floatsisf+0x12>
     ddc:	90 95       	com	r25
     dde:	80 95       	com	r24
     de0:	70 95       	com	r23
     de2:	61 95       	neg	r22
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	8f 4f       	sbci	r24, 0xFF	; 255
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	99 23       	and	r25, r25
     dec:	a9 f0       	breq	.+42     	; 0xe18 <__floatsisf+0x40>
     dee:	f9 2f       	mov	r31, r25
     df0:	96 e9       	ldi	r25, 0x96	; 150
     df2:	bb 27       	eor	r27, r27
     df4:	93 95       	inc	r25
     df6:	f6 95       	lsr	r31
     df8:	87 95       	ror	r24
     dfa:	77 95       	ror	r23
     dfc:	67 95       	ror	r22
     dfe:	b7 95       	ror	r27
     e00:	f1 11       	cpse	r31, r1
     e02:	f8 cf       	rjmp	.-16     	; 0xdf4 <__floatsisf+0x1c>
     e04:	fa f4       	brpl	.+62     	; 0xe44 <__floatsisf+0x6c>
     e06:	bb 0f       	add	r27, r27
     e08:	11 f4       	brne	.+4      	; 0xe0e <__floatsisf+0x36>
     e0a:	60 ff       	sbrs	r22, 0
     e0c:	1b c0       	rjmp	.+54     	; 0xe44 <__floatsisf+0x6c>
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	16 c0       	rjmp	.+44     	; 0xe44 <__floatsisf+0x6c>
     e18:	88 23       	and	r24, r24
     e1a:	11 f0       	breq	.+4      	; 0xe20 <__floatsisf+0x48>
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <__floatsisf+0x6a>
     e20:	77 23       	and	r23, r23
     e22:	21 f0       	breq	.+8      	; 0xe2c <__floatsisf+0x54>
     e24:	9e e8       	ldi	r25, 0x8E	; 142
     e26:	87 2f       	mov	r24, r23
     e28:	76 2f       	mov	r23, r22
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <__floatsisf+0x5e>
     e2c:	66 23       	and	r22, r22
     e2e:	71 f0       	breq	.+28     	; 0xe4c <__floatsisf+0x74>
     e30:	96 e8       	ldi	r25, 0x86	; 134
     e32:	86 2f       	mov	r24, r22
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	2a f0       	brmi	.+10     	; 0xe44 <__floatsisf+0x6c>
     e3a:	9a 95       	dec	r25
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	da f7       	brpl	.-10     	; 0xe3a <__floatsisf+0x62>
     e44:	88 0f       	add	r24, r24
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	97 f9       	bld	r25, 7
     e4c:	08 95       	ret

00000e4e <__fp_inf>:
     e4e:	97 f9       	bld	r25, 7
     e50:	9f 67       	ori	r25, 0x7F	; 127
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	08 95       	ret

00000e5a <__fp_nan>:
     e5a:	9f ef       	ldi	r25, 0xFF	; 255
     e5c:	80 ec       	ldi	r24, 0xC0	; 192
     e5e:	08 95       	ret

00000e60 <__fp_pscA>:
     e60:	00 24       	eor	r0, r0
     e62:	0a 94       	dec	r0
     e64:	16 16       	cp	r1, r22
     e66:	17 06       	cpc	r1, r23
     e68:	18 06       	cpc	r1, r24
     e6a:	09 06       	cpc	r0, r25
     e6c:	08 95       	ret

00000e6e <__fp_pscB>:
     e6e:	00 24       	eor	r0, r0
     e70:	0a 94       	dec	r0
     e72:	12 16       	cp	r1, r18
     e74:	13 06       	cpc	r1, r19
     e76:	14 06       	cpc	r1, r20
     e78:	05 06       	cpc	r0, r21
     e7a:	08 95       	ret

00000e7c <__fp_round>:
     e7c:	09 2e       	mov	r0, r25
     e7e:	03 94       	inc	r0
     e80:	00 0c       	add	r0, r0
     e82:	11 f4       	brne	.+4      	; 0xe88 <__fp_round+0xc>
     e84:	88 23       	and	r24, r24
     e86:	52 f0       	brmi	.+20     	; 0xe9c <__fp_round+0x20>
     e88:	bb 0f       	add	r27, r27
     e8a:	40 f4       	brcc	.+16     	; 0xe9c <__fp_round+0x20>
     e8c:	bf 2b       	or	r27, r31
     e8e:	11 f4       	brne	.+4      	; 0xe94 <__fp_round+0x18>
     e90:	60 ff       	sbrs	r22, 0
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__fp_round+0x20>
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	08 95       	ret

00000e9e <__fp_split3>:
     e9e:	57 fd       	sbrc	r21, 7
     ea0:	90 58       	subi	r25, 0x80	; 128
     ea2:	44 0f       	add	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	59 f0       	breq	.+22     	; 0xebe <__fp_splitA+0x10>
     ea8:	5f 3f       	cpi	r21, 0xFF	; 255
     eaa:	71 f0       	breq	.+28     	; 0xec8 <__fp_splitA+0x1a>
     eac:	47 95       	ror	r20

00000eae <__fp_splitA>:
     eae:	88 0f       	add	r24, r24
     eb0:	97 fb       	bst	r25, 7
     eb2:	99 1f       	adc	r25, r25
     eb4:	61 f0       	breq	.+24     	; 0xece <__fp_splitA+0x20>
     eb6:	9f 3f       	cpi	r25, 0xFF	; 255
     eb8:	79 f0       	breq	.+30     	; 0xed8 <__fp_splitA+0x2a>
     eba:	87 95       	ror	r24
     ebc:	08 95       	ret
     ebe:	12 16       	cp	r1, r18
     ec0:	13 06       	cpc	r1, r19
     ec2:	14 06       	cpc	r1, r20
     ec4:	55 1f       	adc	r21, r21
     ec6:	f2 cf       	rjmp	.-28     	; 0xeac <__fp_split3+0xe>
     ec8:	46 95       	lsr	r20
     eca:	f1 df       	rcall	.-30     	; 0xeae <__fp_splitA>
     ecc:	08 c0       	rjmp	.+16     	; 0xede <__fp_splitA+0x30>
     ece:	16 16       	cp	r1, r22
     ed0:	17 06       	cpc	r1, r23
     ed2:	18 06       	cpc	r1, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	f1 cf       	rjmp	.-30     	; 0xeba <__fp_splitA+0xc>
     ed8:	86 95       	lsr	r24
     eda:	71 05       	cpc	r23, r1
     edc:	61 05       	cpc	r22, r1
     ede:	08 94       	sec
     ee0:	08 95       	ret

00000ee2 <__fp_zero>:
     ee2:	e8 94       	clt

00000ee4 <__fp_szero>:
     ee4:	bb 27       	eor	r27, r27
     ee6:	66 27       	eor	r22, r22
     ee8:	77 27       	eor	r23, r23
     eea:	cb 01       	movw	r24, r22
     eec:	97 f9       	bld	r25, 7
     eee:	08 95       	ret

00000ef0 <__mulsf3>:
     ef0:	0b d0       	rcall	.+22     	; 0xf08 <__mulsf3x>
     ef2:	c4 cf       	rjmp	.-120    	; 0xe7c <__fp_round>
     ef4:	b5 df       	rcall	.-150    	; 0xe60 <__fp_pscA>
     ef6:	28 f0       	brcs	.+10     	; 0xf02 <__mulsf3+0x12>
     ef8:	ba df       	rcall	.-140    	; 0xe6e <__fp_pscB>
     efa:	18 f0       	brcs	.+6      	; 0xf02 <__mulsf3+0x12>
     efc:	95 23       	and	r25, r21
     efe:	09 f0       	breq	.+2      	; 0xf02 <__mulsf3+0x12>
     f00:	a6 cf       	rjmp	.-180    	; 0xe4e <__fp_inf>
     f02:	ab cf       	rjmp	.-170    	; 0xe5a <__fp_nan>
     f04:	11 24       	eor	r1, r1
     f06:	ee cf       	rjmp	.-36     	; 0xee4 <__fp_szero>

00000f08 <__mulsf3x>:
     f08:	ca df       	rcall	.-108    	; 0xe9e <__fp_split3>
     f0a:	a0 f3       	brcs	.-24     	; 0xef4 <__mulsf3+0x4>

00000f0c <__mulsf3_pse>:
     f0c:	95 9f       	mul	r25, r21
     f0e:	d1 f3       	breq	.-12     	; 0xf04 <__mulsf3+0x14>
     f10:	95 0f       	add	r25, r21
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	55 1f       	adc	r21, r21
     f16:	62 9f       	mul	r22, r18
     f18:	f0 01       	movw	r30, r0
     f1a:	72 9f       	mul	r23, r18
     f1c:	bb 27       	eor	r27, r27
     f1e:	f0 0d       	add	r31, r0
     f20:	b1 1d       	adc	r27, r1
     f22:	63 9f       	mul	r22, r19
     f24:	aa 27       	eor	r26, r26
     f26:	f0 0d       	add	r31, r0
     f28:	b1 1d       	adc	r27, r1
     f2a:	aa 1f       	adc	r26, r26
     f2c:	64 9f       	mul	r22, r20
     f2e:	66 27       	eor	r22, r22
     f30:	b0 0d       	add	r27, r0
     f32:	a1 1d       	adc	r26, r1
     f34:	66 1f       	adc	r22, r22
     f36:	82 9f       	mul	r24, r18
     f38:	22 27       	eor	r18, r18
     f3a:	b0 0d       	add	r27, r0
     f3c:	a1 1d       	adc	r26, r1
     f3e:	62 1f       	adc	r22, r18
     f40:	73 9f       	mul	r23, r19
     f42:	b0 0d       	add	r27, r0
     f44:	a1 1d       	adc	r26, r1
     f46:	62 1f       	adc	r22, r18
     f48:	83 9f       	mul	r24, r19
     f4a:	a0 0d       	add	r26, r0
     f4c:	61 1d       	adc	r22, r1
     f4e:	22 1f       	adc	r18, r18
     f50:	74 9f       	mul	r23, r20
     f52:	33 27       	eor	r19, r19
     f54:	a0 0d       	add	r26, r0
     f56:	61 1d       	adc	r22, r1
     f58:	23 1f       	adc	r18, r19
     f5a:	84 9f       	mul	r24, r20
     f5c:	60 0d       	add	r22, r0
     f5e:	21 1d       	adc	r18, r1
     f60:	82 2f       	mov	r24, r18
     f62:	76 2f       	mov	r23, r22
     f64:	6a 2f       	mov	r22, r26
     f66:	11 24       	eor	r1, r1
     f68:	9f 57       	subi	r25, 0x7F	; 127
     f6a:	50 40       	sbci	r21, 0x00	; 0
     f6c:	8a f0       	brmi	.+34     	; 0xf90 <__mulsf3_pse+0x84>
     f6e:	e1 f0       	breq	.+56     	; 0xfa8 <__mulsf3_pse+0x9c>
     f70:	88 23       	and	r24, r24
     f72:	4a f0       	brmi	.+18     	; 0xf86 <__mulsf3_pse+0x7a>
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	bb 1f       	adc	r27, r27
     f7a:	66 1f       	adc	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	a9 f7       	brne	.-22     	; 0xf70 <__mulsf3_pse+0x64>
     f86:	9e 3f       	cpi	r25, 0xFE	; 254
     f88:	51 05       	cpc	r21, r1
     f8a:	70 f0       	brcs	.+28     	; 0xfa8 <__mulsf3_pse+0x9c>
     f8c:	60 cf       	rjmp	.-320    	; 0xe4e <__fp_inf>
     f8e:	aa cf       	rjmp	.-172    	; 0xee4 <__fp_szero>
     f90:	5f 3f       	cpi	r21, 0xFF	; 255
     f92:	ec f3       	brlt	.-6      	; 0xf8e <__mulsf3_pse+0x82>
     f94:	98 3e       	cpi	r25, 0xE8	; 232
     f96:	dc f3       	brlt	.-10     	; 0xf8e <__mulsf3_pse+0x82>
     f98:	86 95       	lsr	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	b7 95       	ror	r27
     fa0:	f7 95       	ror	r31
     fa2:	e7 95       	ror	r30
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	c1 f7       	brne	.-16     	; 0xf98 <__mulsf3_pse+0x8c>
     fa8:	fe 2b       	or	r31, r30
     faa:	88 0f       	add	r24, r24
     fac:	91 1d       	adc	r25, r1
     fae:	96 95       	lsr	r25
     fb0:	87 95       	ror	r24
     fb2:	97 f9       	bld	r25, 7
     fb4:	08 95       	ret

00000fb6 <__udivmodsi4>:
     fb6:	a1 e2       	ldi	r26, 0x21	; 33
     fb8:	1a 2e       	mov	r1, r26
     fba:	aa 1b       	sub	r26, r26
     fbc:	bb 1b       	sub	r27, r27
     fbe:	fd 01       	movw	r30, r26
     fc0:	0d c0       	rjmp	.+26     	; 0xfdc <__udivmodsi4_ep>

00000fc2 <__udivmodsi4_loop>:
     fc2:	aa 1f       	adc	r26, r26
     fc4:	bb 1f       	adc	r27, r27
     fc6:	ee 1f       	adc	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	a2 17       	cp	r26, r18
     fcc:	b3 07       	cpc	r27, r19
     fce:	e4 07       	cpc	r30, r20
     fd0:	f5 07       	cpc	r31, r21
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <__udivmodsi4_ep>
     fd4:	a2 1b       	sub	r26, r18
     fd6:	b3 0b       	sbc	r27, r19
     fd8:	e4 0b       	sbc	r30, r20
     fda:	f5 0b       	sbc	r31, r21

00000fdc <__udivmodsi4_ep>:
     fdc:	66 1f       	adc	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	88 1f       	adc	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	1a 94       	dec	r1
     fe6:	69 f7       	brne	.-38     	; 0xfc2 <__udivmodsi4_loop>
     fe8:	60 95       	com	r22
     fea:	70 95       	com	r23
     fec:	80 95       	com	r24
     fee:	90 95       	com	r25
     ff0:	9b 01       	movw	r18, r22
     ff2:	ac 01       	movw	r20, r24
     ff4:	bd 01       	movw	r22, r26
     ff6:	cf 01       	movw	r24, r30
     ff8:	08 95       	ret

00000ffa <__divmodsi4>:
     ffa:	05 2e       	mov	r0, r21
     ffc:	97 fb       	bst	r25, 7
     ffe:	16 f4       	brtc	.+4      	; 0x1004 <__divmodsi4+0xa>
    1000:	00 94       	com	r0
    1002:	0f d0       	rcall	.+30     	; 0x1022 <__negsi2>
    1004:	57 fd       	sbrc	r21, 7
    1006:	05 d0       	rcall	.+10     	; 0x1012 <__divmodsi4_neg2>
    1008:	d6 df       	rcall	.-84     	; 0xfb6 <__udivmodsi4>
    100a:	07 fc       	sbrc	r0, 7
    100c:	02 d0       	rcall	.+4      	; 0x1012 <__divmodsi4_neg2>
    100e:	46 f4       	brtc	.+16     	; 0x1020 <__divmodsi4_exit>
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <__negsi2>

00001012 <__divmodsi4_neg2>:
    1012:	50 95       	com	r21
    1014:	40 95       	com	r20
    1016:	30 95       	com	r19
    1018:	21 95       	neg	r18
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	4f 4f       	sbci	r20, 0xFF	; 255
    101e:	5f 4f       	sbci	r21, 0xFF	; 255

00001020 <__divmodsi4_exit>:
    1020:	08 95       	ret

00001022 <__negsi2>:
    1022:	90 95       	com	r25
    1024:	80 95       	com	r24
    1026:	70 95       	com	r23
    1028:	61 95       	neg	r22
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	08 95       	ret

00001032 <__umulhisi3>:
    1032:	a2 9f       	mul	r26, r18
    1034:	b0 01       	movw	r22, r0
    1036:	b3 9f       	mul	r27, r19
    1038:	c0 01       	movw	r24, r0
    103a:	a3 9f       	mul	r26, r19
    103c:	70 0d       	add	r23, r0
    103e:	81 1d       	adc	r24, r1
    1040:	11 24       	eor	r1, r1
    1042:	91 1d       	adc	r25, r1
    1044:	b2 9f       	mul	r27, r18
    1046:	70 0d       	add	r23, r0
    1048:	81 1d       	adc	r24, r1
    104a:	11 24       	eor	r1, r1
    104c:	91 1d       	adc	r25, r1
    104e:	08 95       	ret

00001050 <_exit>:
    1050:	f8 94       	cli

00001052 <__stop_program>:
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <__stop_program>
