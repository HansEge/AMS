
GraficTFT_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001388  00800200  00001110  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00801588  00801588  0000252c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000255c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002108  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104e  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0c  00000000  00000000  00005842  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00006450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000943  00000000  00000000  00006978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000187c  00000000  00000000  000072bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00008b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	00 c1       	rjmp	.+512    	; 0x212 <__vector_4>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e1       	ldi	r17, 0x15	; 21
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e1       	ldi	r30, 0x10	; 16
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 38       	cpi	r26, 0x88	; 136
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	25 e1       	ldi	r18, 0x15	; 21
     110:	a8 e8       	ldi	r26, 0x88	; 136
     112:	b5 e1       	ldi	r27, 0x15	; 21
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 38       	cpi	r26, 0x8F	; 143
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	a9 d0       	rcall	.+338    	; 0x272 <main>
     120:	f5 c7       	rjmp	.+4074   	; 0x110c <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <i2c_master_init>:
     124:	e9 eb       	ldi	r30, 0xB9	; 185
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	8c 7f       	andi	r24, 0xFC	; 252
     12c:	80 83       	st	Z, r24
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     134:	08 95       	ret

00000136 <i2c_master_wait>:
     136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     13a:	88 23       	and	r24, r24
     13c:	44 f0       	brlt	.+16     	; 0x14e <i2c_master_wait+0x18>
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	ec eb       	ldi	r30, 0xBC	; 188
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	90 81       	ld	r25, Z
     146:	99 23       	and	r25, r25
     148:	14 f0       	brlt	.+4      	; 0x14e <i2c_master_wait+0x18>
     14a:	81 50       	subi	r24, 0x01	; 1
     14c:	d9 f7       	brne	.-10     	; 0x144 <i2c_master_wait+0xe>
     14e:	08 95       	ret

00000150 <i2c_master_start>:
     150:	84 ea       	ldi	r24, 0xA4	; 164
     152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     156:	ef cf       	rjmp	.-34     	; 0x136 <i2c_master_wait>
     158:	08 95       	ret

0000015a <i2c_master_receive>:
     15a:	af 92       	push	r10
     15c:	bf 92       	push	r11
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	88 0f       	add	r24, r24
     170:	d8 2f       	mov	r29, r24
     172:	d1 60       	ori	r29, 0x01	; 1
     174:	ed df       	rcall	.-38     	; 0x150 <i2c_master_start>
     176:	c0 e0       	ldi	r28, 0x00	; 0
     178:	09 eb       	ldi	r16, 0xB9	; 185
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	0f 2e       	mov	r0, r31
     17e:	fc eb       	ldi	r31, 0xBC	; 188
     180:	ef 2e       	mov	r14, r31
     182:	f1 2c       	mov	r15, r1
     184:	f0 2d       	mov	r31, r0
     186:	0f 2e       	mov	r0, r31
     188:	f4 e8       	ldi	r31, 0x84	; 132
     18a:	af 2e       	mov	r10, r31
     18c:	f0 2d       	mov	r31, r0
     18e:	0f 2e       	mov	r0, r31
     190:	fb eb       	ldi	r31, 0xBB	; 187
     192:	cf 2e       	mov	r12, r31
     194:	d1 2c       	mov	r13, r1
     196:	f0 2d       	mov	r31, r0
     198:	0f 2e       	mov	r0, r31
     19a:	f4 ec       	ldi	r31, 0xC4	; 196
     19c:	bf 2e       	mov	r11, r31
     19e:	f0 2d       	mov	r31, r0
     1a0:	f8 01       	movw	r30, r16
     1a2:	90 81       	ld	r25, Z
     1a4:	98 7f       	andi	r25, 0xF8	; 248
     1a6:	90 34       	cpi	r25, 0x40	; 64
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <i2c_master_receive+0x6e>
     1aa:	18 f4       	brcc	.+6      	; 0x1b2 <i2c_master_receive+0x58>
     1ac:	98 30       	cpi	r25, 0x08	; 8
     1ae:	31 f0       	breq	.+12     	; 0x1bc <i2c_master_receive+0x62>
     1b0:	15 c0       	rjmp	.+42     	; 0x1dc <i2c_master_receive+0x82>
     1b2:	90 35       	cpi	r25, 0x50	; 80
     1b4:	69 f0       	breq	.+26     	; 0x1d0 <i2c_master_receive+0x76>
     1b6:	98 35       	cpi	r25, 0x58	; 88
     1b8:	71 f0       	breq	.+28     	; 0x1d6 <i2c_master_receive+0x7c>
     1ba:	10 c0       	rjmp	.+32     	; 0x1dc <i2c_master_receive+0x82>
     1bc:	f6 01       	movw	r30, r12
     1be:	d0 83       	st	Z, r29
     1c0:	f7 01       	movw	r30, r14
     1c2:	b0 82       	st	Z, r11
     1c4:	b8 df       	rcall	.-144    	; 0x136 <i2c_master_wait>
     1c6:	0a c0       	rjmp	.+20     	; 0x1dc <i2c_master_receive+0x82>
     1c8:	f7 01       	movw	r30, r14
     1ca:	a0 82       	st	Z, r10
     1cc:	b4 df       	rcall	.-152    	; 0x136 <i2c_master_wait>
     1ce:	06 c0       	rjmp	.+12     	; 0x1dc <i2c_master_receive+0x82>
     1d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <i2c_master_receive+0x8a>
     1d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <i2c_master_receive+0x8a>
     1dc:	cf 5f       	subi	r28, 0xFF	; 255
     1de:	ca 3f       	cpi	r28, 0xFA	; 250
     1e0:	f9 f6       	brne	.-66     	; 0x1a0 <i2c_master_receive+0x46>
     1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <i2c_master_receive+0x9a>
     1e4:	94 e9       	ldi	r25, 0x94	; 148
     1e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     1ea:	cf 5f       	subi	r28, 0xFF	; 255
     1ec:	ca 3f       	cpi	r28, 0xFA	; 250
     1ee:	30 f0       	brcs	.+12     	; 0x1fc <i2c_master_receive+0xa2>
     1f0:	8e ee       	ldi	r24, 0xEE	; 238
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <i2c_master_receive+0xa2>
     1f4:	84 e9       	ldi	r24, 0x94	; 148
     1f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     1fa:	8e ee       	ldi	r24, 0xEE	; 238
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	08 95       	ret

00000212 <__vector_4>:

volatile char color;
volatile int COLORFLAG = 0;

ISR(INT3_vect)
{
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	0b b6       	in	r0, 0x3b	; 59
     21e:	0f 92       	push	r0
     220:	2f 93       	push	r18
     222:	3f 93       	push	r19
     224:	4f 93       	push	r20
     226:	5f 93       	push	r21
     228:	6f 93       	push	r22
     22a:	7f 93       	push	r23
     22c:	8f 93       	push	r24
     22e:	9f 93       	push	r25
     230:	af 93       	push	r26
     232:	bf 93       	push	r27
     234:	ef 93       	push	r30
     236:	ff 93       	push	r31
	color = i2c_master_receive(ADDRESS);
     238:	88 e2       	ldi	r24, 0x28	; 40
     23a:	8f df       	rcall	.-226    	; 0x15a <i2c_master_receive>
     23c:	80 93 8e 15 	sts	0x158E, r24	; 0x80158e <color>
	COLORFLAG = 1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	90 93 89 15 	sts	0x1589, r25	; 0x801589 <__data_end+0x1>
     248:	80 93 88 15 	sts	0x1588, r24	; 0x801588 <__data_end>
}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	0f 90       	pop	r0
     266:	0b be       	out	0x3b, r0	; 59
     268:	0f 90       	pop	r0
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	0f 90       	pop	r0
     26e:	1f 90       	pop	r1
     270:	18 95       	reti

00000272 <main>:




int main(void)
{
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <main+0x6>
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	 
	initEXTInterrupt();
     27e:	ff d4       	rcall	.+2558   	; 0xc7e <initEXTInterrupt>
	DisplayInit();
     280:	03 d1       	rcall	.+518    	; 0x488 <DisplayInit>
	i2c_master_init();
     282:	50 df       	rcall	.-352    	; 0x124 <i2c_master_init>
     284:	0f 2e       	mov	r0, r31
	int i = 0;
	//long int i=0;
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
     286:	ff e1       	ldi	r31, 0x1F	; 31
     288:	cf 2e       	mov	r12, r31
     28a:	f0 2d       	mov	r31, r0
     28c:	0f 2e       	mov	r0, r31
     28e:	ff e3       	ldi	r31, 0x3F	; 63
     290:	ef 2e       	mov	r14, r31
     292:	f0 2d       	mov	r31, r0
     294:	0f e1       	ldi	r16, 0x1F	; 31
     296:	20 ef       	ldi	r18, 0xF0	; 240
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e4       	ldi	r20, 0x40	; 64
     29c:	51 e0       	ldi	r21, 0x01	; 1
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	52 d1       	rcall	.+676    	; 0x54c <FillRectangle>
     2a8:	4a e0       	ldi	r20, 0x0A	; 10
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
	float countGreen=0;
	float countBlue=0;
	writeString("Sort M&M's",10,10);
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	6a e0       	ldi	r22, 0x0A	; 10
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	74 d2       	rcall	.+1256   	; 0x79e <writeString>
     2b6:	4a e0       	ldi	r20, 0x0A	; 10
	writeString("Total:",190,10);
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	6e eb       	ldi	r22, 0xBE	; 190
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	8b e0       	ldi	r24, 0x0B	; 11
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	6d d2       	rcall	.+1242   	; 0x79e <writeString>
     2c4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c6:	83 ed       	ldi	r24, 0xD3	; 211
     2c8:	90 e3       	ldi	r25, 0x30	; 48
     2ca:	21 50       	subi	r18, 0x01	; 1
     2cc:	80 40       	sbci	r24, 0x00	; 0
     2ce:	90 40       	sbci	r25, 0x00	; 0
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x58>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x62>
     2d4:	00 00       	nop
     2d6:	19 82       	std	Y+1, r1	; 0x01
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
	float countGreen=0;
	float countBlue=0;
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	1b 82       	std	Y+3, r1	; 0x03
     2dc:	1c 82       	std	Y+4, r1	; 0x04
     2de:	41 2c       	mov	r4, r1
	//long int i=0;
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
	float countGreen=0;
     2e0:	51 2c       	mov	r5, r1
     2e2:	32 01       	movw	r6, r4
     2e4:	53 01       	movw	r10, r6
	int i = 0;
	//long int i=0;
	//int count = 0;
	FillRectangle(0,0,320,240,31,63,31);
	//int size = sizeof(array)/sizeof(array[0]);
	float countRed=0;
     2e6:	42 01       	movw	r8, r4
     2e8:	0f 2e       	mov	r0, r31
	writeString("Total:",190,10);

	_delay_ms(1000);
    while (1) 
    {
		FillRectangle(0,0,320,240,31,63,31);
     2ea:	ff e1       	ldi	r31, 0x1F	; 31
     2ec:	cf 2e       	mov	r12, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	0f 2e       	mov	r0, r31
     2f2:	ff e3       	ldi	r31, 0x3F	; 63
     2f4:	ef 2e       	mov	r14, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	0f e1       	ldi	r16, 0x1F	; 31
     2fa:	20 ef       	ldi	r18, 0xF0	; 240
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e4       	ldi	r20, 0x40	; 64
     300:	51 e0       	ldi	r21, 0x01	; 1
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	20 d1       	rcall	.+576    	; 0x54c <FillRectangle>
     30c:	4a e0       	ldi	r20, 0x0A	; 10
		writeString("Sort M&M's",10,10);
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	6a e0       	ldi	r22, 0x0A	; 10
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	42 d2       	rcall	.+1156   	; 0x79e <writeString>
     31a:	4a e0       	ldi	r20, 0x0A	; 10
		writeString("Total:",190,10);
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	6e eb       	ldi	r22, 0xBE	; 190
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	8b e0       	ldi	r24, 0x0B	; 11
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	3b d2       	rcall	.+1142   	; 0x79e <writeString>
     328:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <color>
		
		if (color == 'R' && COLORFLAG == 1)
     32c:	82 35       	cpi	r24, 0x52	; 82
     32e:	a1 f4       	brne	.+40     	; 0x358 <main+0xe6>
     330:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <__data_end>
     334:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <__data_end+0x1>
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	71 f4       	brne	.+28     	; 0x358 <main+0xe6>
     33c:	20 e0       	ldi	r18, 0x00	; 0
		{
			countRed++;
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	5f e3       	ldi	r21, 0x3F	; 63
     344:	c5 01       	movw	r24, r10
     346:	b4 01       	movw	r22, r8
     348:	a6 d4       	rcall	.+2380   	; 0xc96 <__addsf3>
     34a:	4b 01       	movw	r8, r22
     34c:	5c 01       	movw	r10, r24
     34e:	10 92 89 15 	sts	0x1589, r1	; 0x801589 <__data_end+0x1>
			COLORFLAG = 0;
     352:	10 92 88 15 	sts	0x1588, r1	; 0x801588 <__data_end>
     356:	33 c0       	rjmp	.+102    	; 0x3be <main+0x14c>
     358:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <color>
		}
		else if (color == 'G' && COLORFLAG == 1)
     35c:	87 34       	cpi	r24, 0x47	; 71
     35e:	a1 f4       	brne	.+40     	; 0x388 <main+0x116>
     360:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <__data_end>
     364:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <__data_end+0x1>
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	71 f4       	brne	.+28     	; 0x388 <main+0x116>
     36c:	20 e0       	ldi	r18, 0x00	; 0
		{
			countGreen++;
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e8       	ldi	r20, 0x80	; 128
     372:	5f e3       	ldi	r21, 0x3F	; 63
     374:	c3 01       	movw	r24, r6
     376:	b2 01       	movw	r22, r4
     378:	8e d4       	rcall	.+2332   	; 0xc96 <__addsf3>
     37a:	2b 01       	movw	r4, r22
     37c:	3c 01       	movw	r6, r24
     37e:	10 92 89 15 	sts	0x1589, r1	; 0x801589 <__data_end+0x1>
			COLORFLAG = 0;
     382:	10 92 88 15 	sts	0x1588, r1	; 0x801588 <__data_end>
     386:	1b c0       	rjmp	.+54     	; 0x3be <main+0x14c>
     388:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <color>
		}
		else if (color == 'B' && COLORFLAG == 1)
     38c:	82 34       	cpi	r24, 0x42	; 66
     38e:	b9 f4       	brne	.+46     	; 0x3be <main+0x14c>
     390:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <__data_end>
     394:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <__data_end+0x1>
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	89 f4       	brne	.+34     	; 0x3be <main+0x14c>
     39c:	20 e0       	ldi	r18, 0x00	; 0
		{
			countBlue++;
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e8       	ldi	r20, 0x80	; 128
     3a2:	5f e3       	ldi	r21, 0x3F	; 63
     3a4:	69 81       	ldd	r22, Y+1	; 0x01
     3a6:	7a 81       	ldd	r23, Y+2	; 0x02
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	9c 81       	ldd	r25, Y+4	; 0x04
     3ac:	74 d4       	rcall	.+2280   	; 0xc96 <__addsf3>
     3ae:	69 83       	std	Y+1, r22	; 0x01
     3b0:	7a 83       	std	Y+2, r23	; 0x02
     3b2:	8b 83       	std	Y+3, r24	; 0x03
     3b4:	9c 83       	std	Y+4, r25	; 0x04
     3b6:	10 92 89 15 	sts	0x1589, r1	; 0x801589 <__data_end+0x1>
			COLORFLAG = 0;
     3ba:	10 92 88 15 	sts	0x1588, r1	; 0x801588 <__data_end>
     3be:	e9 80       	ldd	r14, Y+1	; 0x01
		}
		
		drawTotal(countRed, countGreen, countBlue);
     3c0:	fa 80       	ldd	r15, Y+2	; 0x02
     3c2:	0b 81       	ldd	r16, Y+3	; 0x03
     3c4:	1c 81       	ldd	r17, Y+4	; 0x04
     3c6:	a3 01       	movw	r20, r6
     3c8:	92 01       	movw	r18, r4
     3ca:	c5 01       	movw	r24, r10
     3cc:	b4 01       	movw	r22, r8
     3ce:	bc d3       	rcall	.+1912   	; 0xb48 <drawTotal>
		//countBlue(count);
		//countRed(count);

		//writeString("12",50,100);
		
		countRed++;
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	c5 01       	movw	r24, r10
     3da:	b4 01       	movw	r22, r8
     3dc:	5c d4       	rcall	.+2232   	; 0xc96 <__addsf3>
     3de:	20 e0       	ldi	r18, 0x00	; 0
		countRed++;
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e8       	ldi	r20, 0x80	; 128
     3e4:	5f e3       	ldi	r21, 0x3F	; 63
     3e6:	57 d4       	rcall	.+2222   	; 0xc96 <__addsf3>
     3e8:	4b 01       	movw	r8, r22
     3ea:	5c 01       	movw	r10, r24
     3ec:	20 e0       	ldi	r18, 0x00	; 0
		countBlue++;
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e8       	ldi	r20, 0x80	; 128
     3f2:	5f e3       	ldi	r21, 0x3F	; 63
     3f4:	69 81       	ldd	r22, Y+1	; 0x01
     3f6:	7a 81       	ldd	r23, Y+2	; 0x02
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	4c d4       	rcall	.+2200   	; 0xc96 <__addsf3>
     3fe:	69 83       	std	Y+1, r22	; 0x01
     400:	7a 83       	std	Y+2, r23	; 0x02
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	20 e0       	ldi	r18, 0x00	; 0
		countGreen++;
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e8       	ldi	r20, 0x80	; 128
     40c:	5f e3       	ldi	r21, 0x3F	; 63
     40e:	c3 01       	movw	r24, r6
     410:	b2 01       	movw	r22, r4
     412:	41 d4       	rcall	.+2178   	; 0xc96 <__addsf3>
     414:	2b 01       	movw	r4, r22
     416:	3c 01       	movw	r6, r24
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	83 ed       	ldi	r24, 0xD3	; 211
     41c:	90 e3       	ldi	r25, 0x30	; 48
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	80 40       	sbci	r24, 0x00	; 0
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     428:	00 00       	nop
     42a:	12 d0       	rcall	.+36     	; 0x450 <DisplayOn>
	
		_delay_ms(1000);
		DisplayOn();		
     42c:	5d cf       	rjmp	.-326    	; 0x2e8 <main+0x76>

0000042e <WriteCommand>:
     42e:	88 b9       	out	0x08, r24	; 8
    }
     430:	5f 98       	cbi	0x0b, 7	; 11
	 WriteCommand(0x2C);
 }
 
 //Red 0-31, Green 0-63, blue 0-31
 void WritePixel(unsigned char Red, unsigned char Blue, unsigned char Green){
	 WriteData((Red<<11)|(Green<<5)|Blue);
     432:	a1 98       	cbi	0x14, 1	; 20
     434:	a2 98       	cbi	0x14, 2	; 20
     436:	00 00       	nop
     438:	a2 9a       	sbi	0x14, 2	; 20
     43a:	00 00       	nop
     43c:	08 95       	ret

0000043e <WriteData>:
     43e:	92 b9       	out	0x02, r25	; 2
     440:	88 b9       	out	0x08, r24	; 8
     442:	5f 9a       	sbi	0x0b, 7	; 11
     444:	a1 98       	cbi	0x14, 1	; 20
     446:	a2 98       	cbi	0x14, 2	; 20
     448:	00 00       	nop
     44a:	a2 9a       	sbi	0x14, 2	; 20
     44c:	00 00       	nop
     44e:	08 95       	ret

00000450 <DisplayOn>:
     450:	89 e2       	ldi	r24, 0x29	; 41
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	ec cf       	rjmp	.-40     	; 0x42e <WriteCommand>
     456:	08 95       	ret

00000458 <SleepOut>:
     458:	81 e1       	ldi	r24, 0x11	; 17
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	e8 cf       	rjmp	.-48     	; 0x42e <WriteCommand>
     45e:	08 95       	ret

00000460 <MemoryAccessControl>:
     460:	cf 93       	push	r28
     462:	c8 2f       	mov	r28, r24
     464:	86 e3       	ldi	r24, 0x36	; 54
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	e2 df       	rcall	.-60     	; 0x42e <WriteCommand>
     46a:	8c 2f       	mov	r24, r28
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	e7 df       	rcall	.-50     	; 0x43e <WriteData>
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <InterfacePixelFormat>:
     474:	cf 93       	push	r28
     476:	c8 2f       	mov	r28, r24
     478:	8a e3       	ldi	r24, 0x3A	; 58
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	d8 df       	rcall	.-80     	; 0x42e <WriteCommand>
     47e:	8c 2f       	mov	r24, r28
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	dd df       	rcall	.-70     	; 0x43e <WriteData>
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <DisplayInit>:
     488:	83 b3       	in	r24, 0x13	; 19
     48a:	87 60       	ori	r24, 0x07	; 7
     48c:	83 bb       	out	0x13, r24	; 19
     48e:	57 9a       	sbi	0x0a, 7	; 10
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	81 b9       	out	0x01, r24	; 1
     494:	87 b9       	out	0x07, r24	; 7
     496:	84 b3       	in	r24, 0x14	; 20
     498:	87 60       	ori	r24, 0x07	; 7
     49a:	84 bb       	out	0x14, r24	; 20
     49c:	5f 9a       	sbi	0x0b, 7	; 11
     49e:	a1 98       	cbi	0x14, 1	; 20
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	85 ea       	ldi	r24, 0xA5	; 165
     4a4:	9e e0       	ldi	r25, 0x0E	; 14
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <DisplayInit+0x1e>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <DisplayInit+0x28>
     4b0:	00 00       	nop
     4b2:	a1 9a       	sbi	0x14, 1	; 20
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	88 e5       	ldi	r24, 0x58	; 88
     4b8:	96 e0       	ldi	r25, 0x06	; 6
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <DisplayInit+0x32>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <DisplayInit+0x3c>
     4c4:	00 00       	nop
     4c6:	c8 df       	rcall	.-112    	; 0x458 <SleepOut>
     4c8:	c3 df       	rcall	.-122    	; 0x450 <DisplayOn>
     4ca:	88 e0       	ldi	r24, 0x08	; 8
     4cc:	c9 df       	rcall	.-110    	; 0x460 <MemoryAccessControl>
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	d1 cf       	rjmp	.-94     	; 0x474 <InterfacePixelFormat>
     4d2:	08 95       	ret

000004d4 <MemoryWrite>:
     4d4:	8c e2       	ldi	r24, 0x2C	; 44
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	aa cf       	rjmp	.-172    	; 0x42e <WriteCommand>
     4da:	08 95       	ret

000004dc <SetColomnAddress>:
 }
 void SetColomnAddress(unsigned int Start,unsigned int End){
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	08 2f       	mov	r16, r24
     4e6:	d9 2f       	mov	r29, r25
     4e8:	16 2f       	mov	r17, r22
     4ea:	c7 2f       	mov	r28, r23
	 WriteCommand(0x2A);
     4ec:	8a e2       	ldi	r24, 0x2A	; 42
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9e df       	rcall	.-196    	; 0x42e <WriteCommand>
	 WriteData(Start>>8);
     4f2:	8d 2f       	mov	r24, r29
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	a3 df       	rcall	.-186    	; 0x43e <WriteData>
	 WriteData(Start);
     4f8:	80 2f       	mov	r24, r16
     4fa:	9d 2f       	mov	r25, r29
     4fc:	a0 df       	rcall	.-192    	; 0x43e <WriteData>
	 WriteData(End>>8);
     4fe:	8c 2f       	mov	r24, r28
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9d df       	rcall	.-198    	; 0x43e <WriteData>
	 WriteData(End);
     504:	81 2f       	mov	r24, r17
     506:	9c 2f       	mov	r25, r28
     508:	9a df       	rcall	.-204    	; 0x43e <WriteData>
     50a:	df 91       	pop	r29
 }
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	08 95       	ret

00000514 <SetPageAddress>:
     514:	0f 93       	push	r16
 
 void SetPageAddress(unsigned int Start,unsigned int End){
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	08 2f       	mov	r16, r24
     51e:	d9 2f       	mov	r29, r25
     520:	16 2f       	mov	r17, r22
     522:	c7 2f       	mov	r28, r23
	 	 WriteCommand(0x2B);
     524:	8b e2       	ldi	r24, 0x2B	; 43
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	82 df       	rcall	.-252    	; 0x42e <WriteCommand>
	 	 WriteData(Start>>8);
     52a:	8d 2f       	mov	r24, r29
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	87 df       	rcall	.-242    	; 0x43e <WriteData>
	 	 WriteData(Start);
     530:	80 2f       	mov	r24, r16
     532:	9d 2f       	mov	r25, r29
     534:	84 df       	rcall	.-248    	; 0x43e <WriteData>
	 	 WriteData(End>>8);
     536:	8c 2f       	mov	r24, r28
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	81 df       	rcall	.-254    	; 0x43e <WriteData>
	 	 WriteData(End);
     53c:	81 2f       	mov	r24, r17
     53e:	9c 2f       	mov	r25, r28
     540:	7e df       	rcall	.-260    	; 0x43e <WriteData>
     542:	df 91       	pop	r29
 }
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <FillRectangle>:
     54c:	8f 92       	push	r8
 
 void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Blue, unsigned char Green){
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	eb 01       	movw	r28, r22
     566:	4a 01       	movw	r8, r20
     568:	59 01       	movw	r10, r18
	 SetPageAddress(StartX,StartX+Width);
     56a:	bc 01       	movw	r22, r24
     56c:	64 0f       	add	r22, r20
     56e:	75 1f       	adc	r23, r21
     570:	d1 df       	rcall	.-94     	; 0x514 <SetPageAddress>
	 SetColomnAddress(StartY,StartY+Height);
     572:	be 01       	movw	r22, r28
     574:	6a 0d       	add	r22, r10
     576:	7b 1d       	adc	r23, r11
     578:	ce 01       	movw	r24, r28
	 MemoryWrite();
     57a:	b0 df       	rcall	.-160    	; 0x4dc <SetColomnAddress>
	 for(unsigned long i=0; i<((unsigned long)Width*Height);i++)
     57c:	ab df       	rcall	.-170    	; 0x4d4 <MemoryWrite>
     57e:	94 01       	movw	r18, r8
     580:	d5 01       	movw	r26, r10
     582:	b5 d5       	rcall	.+2922   	; 0x10ee <__umulhisi3>
     584:	4b 01       	movw	r8, r22
     586:	5c 01       	movw	r10, r24
     588:	67 2b       	or	r22, r23
     58a:	68 2b       	or	r22, r24
     58c:	69 2b       	or	r22, r25
     58e:	e1 f0       	breq	.+56     	; 0x5c8 <FillRectangle+0x7c>
	 WriteCommand(0x2C);
 }
 
 //Red 0-31, Green 0-63, blue 0-31
 void WritePixel(unsigned char Red, unsigned char Blue, unsigned char Green){
	 WriteData((Red<<11)|(Green<<5)|Blue);
     590:	80 e2       	ldi	r24, 0x20	; 32
     592:	e8 9e       	mul	r14, r24
     594:	70 01       	movw	r14, r0
     596:	11 24       	eor	r1, r1
     598:	ec 28       	or	r14, r12
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	10 2f       	mov	r17, r16
     59e:	00 27       	eor	r16, r16
     5a0:	11 0f       	add	r17, r17
     5a2:	11 0f       	add	r17, r17
     5a4:	11 0f       	add	r17, r17
     5a6:	0e 29       	or	r16, r14
     5a8:	1f 29       	or	r17, r15
     5aa:	c1 2c       	mov	r12, r1
     5ac:	d1 2c       	mov	r13, r1
     5ae:	76 01       	movw	r14, r12
     5b0:	c8 01       	movw	r24, r16
     5b2:	45 df       	rcall	.-374    	; 0x43e <WriteData>
 
 void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Blue, unsigned char Green){
	 SetPageAddress(StartX,StartX+Width);
	 SetColomnAddress(StartY,StartY+Height);
	 MemoryWrite();
	 for(unsigned long i=0; i<((unsigned long)Width*Height);i++)
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	c8 1a       	sub	r12, r24
     5b8:	d8 0a       	sbc	r13, r24
     5ba:	e8 0a       	sbc	r14, r24
     5bc:	f8 0a       	sbc	r15, r24
     5be:	c8 14       	cp	r12, r8
     5c0:	d9 04       	cpc	r13, r9
     5c2:	ea 04       	cpc	r14, r10
     5c4:	fb 04       	cpc	r15, r11
     5c6:	a1 f7       	brne	.-24     	; 0x5b0 <FillRectangle+0x64>
		WritePixel(Red,Green,Blue);
 }
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	08 95       	ret

000005e2 <lengthOfFixedSymbol>:
	//prepares the offset for next letter.
	start_x = start_x+symbol_carrier[length_of_symbol]+1; 
		
}
int lengthOfFixedSymbol(int length_of_symbol){
	int fixed_letter = symbol_carrier[length_of_symbol]/8;
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	fc 01       	movw	r30, r24
     5e8:	e4 5f       	subi	r30, 0xF4	; 244
     5ea:	fb 4e       	sbci	r31, 0xEB	; 235
     5ec:	20 81       	ld	r18, Z
     5ee:	31 81       	ldd	r19, Z+1	; 0x01
     5f0:	c9 01       	movw	r24, r18
     5f2:	96 95       	lsr	r25
     5f4:	87 95       	ror	r24
     5f6:	96 95       	lsr	r25
     5f8:	87 95       	ror	r24
     5fa:	96 95       	lsr	r25
     5fc:	87 95       	ror	r24
	int modulus_fixed_letter = symbol_carrier[length_of_symbol]%8;
	if(modulus_fixed_letter>0){
     5fe:	27 70       	andi	r18, 0x07	; 7
     600:	33 27       	eor	r19, r19
     602:	12 16       	cp	r1, r18
     604:	13 06       	cpc	r1, r19
     606:	0c f4       	brge	.+2      	; 0x60a <lengthOfFixedSymbol+0x28>
		fixed_letter++;
     608:	01 96       	adiw	r24, 0x01	; 1
	} 
	return fixed_letter;
}
     60a:	08 95       	ret

0000060c <drawSymbol>:


void drawSymbol(const uint8_t bitmap[],int length,int length_count,int startx,int starty, int letter){
     60c:	2f 92       	push	r2
     60e:	3f 92       	push	r3
     610:	4f 92       	push	r4
     612:	5f 92       	push	r5
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
	//Sets starts position on x-axis 
	int startX = startx;
	//Sets stop position on x-axis
	int stopX= startx+7;
     630:	f9 01       	movw	r30, r18
     632:	37 96       	adiw	r30, 0x07	; 7
	//Sets start position on y-axis
	int starY = starty;
	
	// this for loop runs trough the full byte length of the letter according to the bitmap from Dotfactory.
	for (int j=0;j<length_count;j++)
     634:	14 16       	cp	r1, r20
     636:	15 06       	cpc	r1, r21
     638:	0c f0       	brlt	.+2      	; 0x63c <drawSymbol+0x30>
     63a:	53 c0       	rjmp	.+166    	; 0x6e2 <drawSymbol+0xd6>
		startX = stopX+1;
		stopX = stopX+8;
		
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
     63c:	66 0f       	add	r22, r22
     63e:	77 1f       	adc	r23, r23
     640:	66 0f       	add	r22, r22
     642:	77 1f       	adc	r23, r23
     644:	66 0f       	add	r22, r22
     646:	77 1f       	adc	r23, r23
     648:	5b 01       	movw	r10, r22
     64a:	a2 0e       	add	r10, r18
     64c:	b3 1e       	adc	r11, r19
     64e:	ec 01       	movw	r28, r24
     650:	ce 0d       	add	r28, r14
     652:	df 1d       	adc	r29, r15
     654:	e4 0e       	add	r14, r20
     656:	f5 1e       	adc	r15, r21
     658:	4c 01       	movw	r8, r24
     65a:	8e 0c       	add	r8, r14
     65c:	9f 1c       	adc	r9, r15
     65e:	6f 01       	movw	r12, r30
     660:	c9 01       	movw	r24, r18
		
		// This for loop runs the byte through and checks if every single bit is high or low
		// if that bit is high a black dot is made, if the bit is low a withe dot is made.
		for (int i=0; i<8; i++)
		{
			if((bitmap[j+letter] & (0b10000000>>i)) != 0)
     662:	68 94       	set
     664:	ee 24       	eor	r14, r14
     666:	e7 f8       	bld	r14, 7
     668:	f1 2c       	mov	r15, r1
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
			startX = startx;
			stopX = startX+7;
     66a:	2e 2e       	mov	r2, r30
     66c:	3f 2e       	mov	r3, r31
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
			startX = startx;
     66e:	42 2e       	mov	r4, r18
     670:	53 2e       	mov	r5, r19
	
	// this for loop runs trough the full byte length of the letter according to the bitmap from Dotfactory.
	for (int j=0;j<length_count;j++)
	{
		//Set page and colomn address
		SetPageAddress(startX,stopX);
     672:	b6 01       	movw	r22, r12
     674:	4f df       	rcall	.-354    	; 0x514 <SetPageAddress>
		SetColomnAddress(starY,starY);
     676:	b8 01       	movw	r22, r16
     678:	c8 01       	movw	r24, r16
		MemoryWrite();
     67a:	30 df       	rcall	.-416    	; 0x4dc <SetColomnAddress>
     67c:	2b df       	rcall	.-426    	; 0x4d4 <MemoryWrite>
		
		// This for loop runs the byte through and checks if every single bit is high or low
		// if that bit is high a black dot is made, if the bit is low a withe dot is made.
		for (int i=0; i<8; i++)
     67e:	61 2c       	mov	r6, r1
     680:	71 2c       	mov	r7, r1
		{
			if((bitmap[j+letter] & (0b10000000>>i)) != 0)
     682:	88 81       	ld	r24, Y
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	c7 01       	movw	r24, r14
     68a:	06 2c       	mov	r0, r6
     68c:	02 c0       	rjmp	.+4      	; 0x692 <drawSymbol+0x86>
     68e:	95 95       	asr	r25
     690:	87 95       	ror	r24
     692:	0a 94       	dec	r0
     694:	e2 f7       	brpl	.-8      	; 0x68e <drawSymbol+0x82>
     696:	82 23       	and	r24, r18
     698:	93 23       	and	r25, r19
     69a:	89 2b       	or	r24, r25
	 WriteCommand(0x2C);
 }
 
 //Red 0-31, Green 0-63, blue 0-31
 void WritePixel(unsigned char Red, unsigned char Blue, unsigned char Green){
	 WriteData((Red<<11)|(Green<<5)|Blue);
     69c:	21 f0       	breq	.+8      	; 0x6a6 <drawSymbol+0x9a>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	cd de       	rcall	.-614    	; 0x43e <WriteData>
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <drawSymbol+0xa0>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	c9 de       	rcall	.-622    	; 0x43e <WriteData>
		SetColomnAddress(starY,starY);
		MemoryWrite();
		
		// This for loop runs the byte through and checks if every single bit is high or low
		// if that bit is high a black dot is made, if the bit is low a withe dot is made.
		for (int i=0; i<8; i++)
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	68 1a       	sub	r6, r24
     6b0:	78 0a       	sbc	r7, r24
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	68 16       	cp	r6, r24
     6b6:	71 04       	cpc	r7, r1
     6b8:	21 f7       	brne	.-56     	; 0x682 <drawSymbol+0x76>
			}
		}
		
		//Set new startX to be ready for next byte. (+1 to not override the last bit in the last byte)
		startX = stopX+1;
		stopX = stopX+8;
     6ba:	96 01       	movw	r18, r12
     6bc:	28 5f       	subi	r18, 0xF8	; 248
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
		
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
     6c0:	2a 15       	cp	r18, r10
     6c2:	3b 05       	cpc	r19, r11
     6c4:	24 f4       	brge	.+8      	; 0x6ce <drawSymbol+0xc2>
				WritePixel(31,31,63);
			}
		}
		
		//Set new startX to be ready for next byte. (+1 to not override the last bit in the last byte)
		startX = stopX+1;
     6c6:	c6 01       	movw	r24, r12
     6c8:	01 96       	adiw	r24, 0x01	; 1
		stopX = stopX+8;
     6ca:	69 01       	movw	r12, r18
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <drawSymbol+0xce>
		
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
     6ce:	0f 5f       	subi	r16, 0xFF	; 255
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
			startX = startx;
			stopX = startX+7;
     6d2:	c2 2c       	mov	r12, r2
     6d4:	d3 2c       	mov	r13, r3
		//this if loop keep track of the letters length in the x-axis direction. 
		//if that length is reached it goes the the next y-axis row.
		if(stopX >= length*8+startx)
		{
			starY++;
			startX = startx;
     6d6:	84 2d       	mov	r24, r4
     6d8:	95 2d       	mov	r25, r5
     6da:	21 96       	adiw	r28, 0x01	; 1
	int stopX= startx+7;
	//Sets start position on y-axis
	int starY = starty;
	
	// this for loop runs trough the full byte length of the letter according to the bitmap from Dotfactory.
	for (int j=0;j<length_count;j++)
     6dc:	c8 15       	cp	r28, r8
     6de:	d9 05       	cpc	r29, r9
     6e0:	41 f6       	brne	.-112    	; 0x672 <drawSymbol+0x66>
			stopX = startX+7;
		}
	}
	

}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	4f 90       	pop	r4
     702:	3f 90       	pop	r3
     704:	2f 90       	pop	r2
     706:	08 95       	ret

00000708 <getSymbolParameters>:
	 MemoryWrite();
	 for(unsigned long i=0; i<((unsigned long)Width*Height);i++)
		WritePixel(Red,Green,Blue);
 }
 
void getSymbolParameters(int length_of_symbol, int startX, int startY){
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	8a 01       	movw	r16, r20
	//Makes sure to not override the previous letter.
	if (startX != checkX)
     716:	20 91 8a 15 	lds	r18, 0x158A	; 0x80158a <checkX>
     71a:	30 91 8b 15 	lds	r19, 0x158B	; 0x80158b <checkX+0x1>
     71e:	26 17       	cp	r18, r22
     720:	37 07       	cpc	r19, r23
     722:	41 f0       	breq	.+16     	; 0x734 <getSymbolParameters+0x2c>
	{
		checkX = startX;
     724:	70 93 8b 15 	sts	0x158B, r23	; 0x80158b <checkX+0x1>
     728:	60 93 8a 15 	sts	0x158A, r22	; 0x80158a <checkX>
		start_x = startX;
     72c:	70 93 8d 15 	sts	0x158D, r23	; 0x80158d <start_x+0x1>
     730:	60 93 8c 15 	sts	0x158C, r22	; 0x80158c <start_x>
	}
	//the first parameter is the length of the letter, the second is the offset. Therefore to get the length of the letter 
	// I have to multiply by 2. 
	length_of_symbol = length_of_symbol*2; //The parameters from array_carrier in the DotFactory.h
     734:	ec 01       	movw	r28, r24
     736:	cc 0f       	add	r28, r28
     738:	dd 1f       	adc	r29, r29
	
	// is the length of the chosen character in the DotFactory BitMap[]. 
	int length_count = symbol_carrier[length_of_symbol+3]-symbol_carrier[length_of_symbol+1];
     73a:	fe 01       	movw	r30, r28
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	e2 5f       	subi	r30, 0xF2	; 242
     742:	fb 4e       	sbci	r31, 0xEB	; 235
     744:	e0 80       	ld	r14, Z
     746:	f1 80       	ldd	r15, Z+1	; 0x01
	
	//is the offset of where in the DotFactory BitMap[] to read from.
	unsigned int offset_symbol = symbol_carrier[length_of_symbol+1];
	//A function to return the length of letter en whole byte
	int fixed_letter = lengthOfFixedSymbol(length_of_symbol); 	
     748:	ce 01       	movw	r24, r28
     74a:	4b df       	rcall	.-362    	; 0x5e2 <lengthOfFixedSymbol>
	
	drawSymbol(symbols,fixed_letter,length_count,start_x,startY, offset_symbol);
     74c:	20 91 8c 15 	lds	r18, 0x158C	; 0x80158c <start_x>
     750:	30 91 8d 15 	lds	r19, 0x158D	; 0x80158d <start_x+0x1>
	//the first parameter is the length of the letter, the second is the offset. Therefore to get the length of the letter 
	// I have to multiply by 2. 
	length_of_symbol = length_of_symbol*2; //The parameters from array_carrier in the DotFactory.h
	
	// is the length of the chosen character in the DotFactory BitMap[]. 
	int length_count = symbol_carrier[length_of_symbol+3]-symbol_carrier[length_of_symbol+1];
     754:	fe 01       	movw	r30, r28
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	ee 5e       	subi	r30, 0xEE	; 238
     75c:	fb 4e       	sbci	r31, 0xEB	; 235
	//is the offset of where in the DotFactory BitMap[] to read from.
	unsigned int offset_symbol = symbol_carrier[length_of_symbol+1];
	//A function to return the length of letter en whole byte
	int fixed_letter = lengthOfFixedSymbol(length_of_symbol); 	
	
	drawSymbol(symbols,fixed_letter,length_count,start_x,startY, offset_symbol);
     75e:	40 81       	ld	r20, Z
     760:	51 81       	ldd	r21, Z+1	; 0x01
     762:	4e 19       	sub	r20, r14
     764:	5f 09       	sbc	r21, r15
     766:	bc 01       	movw	r22, r24
     768:	82 e1       	ldi	r24, 0x12	; 18
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	4f df       	rcall	.-354    	; 0x60c <drawSymbol>
	
	//prepares the offset for next letter.
	start_x = start_x+symbol_carrier[length_of_symbol]+1; 
     76e:	80 91 8c 15 	lds	r24, 0x158C	; 0x80158c <start_x>
     772:	90 91 8d 15 	lds	r25, 0x158D	; 0x80158d <start_x+0x1>
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	cc 0f       	add	r28, r28
     77a:	dd 1f       	adc	r29, r29
     77c:	c4 5f       	subi	r28, 0xF4	; 244
     77e:	db 4e       	sbci	r29, 0xEB	; 235
     780:	28 81       	ld	r18, Y
     782:	39 81       	ldd	r19, Y+1	; 0x01
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	90 93 8d 15 	sts	0x158D, r25	; 0x80158d <start_x+0x1>
     78c:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <start_x>
		
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <writeString>:
	}
	

}

void writeString(char str[],int startx, int starty){
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	c6 5c       	subi	r28, 0xC6	; 198
     7b8:	d1 09       	sbc	r29, r1
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
	// temp is the maximum length of the input string 	
	int temp[99]={},i=0,j;
     7c4:	fe 01       	movw	r30, r28
     7c6:	31 96       	adiw	r30, 0x01	; 1
     7c8:	26 ec       	ldi	r18, 0xC6	; 198
     7ca:	df 01       	movw	r26, r30
     7cc:	1d 92       	st	X+, r1
     7ce:	2a 95       	dec	r18
     7d0:	e9 f7       	brne	.-6      	; 0x7cc <writeString+0x2e>
	
	//the while loop puts puts the input array into a new array that has the exact length of the string
	while(str[i]!='\0') 
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 81       	ld	r18, Z
     7d6:	22 23       	and	r18, r18
     7d8:	a1 f1       	breq	.+104    	; 0x842 <writeString+0xa4>
     7da:	de 01       	movw	r26, r28
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	7d 01       	movw	r14, r26
     7e0:	31 96       	adiw	r30, 0x01	; 1
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	10 e0       	ldi	r17, 0x00	; 0
	{
		temp[i]=str[i]; i++;
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	2d 93       	st	X+, r18
     7ea:	3d 93       	st	X+, r19
     7ec:	0f 5f       	subi	r16, 0xFF	; 255
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
void writeString(char str[],int startx, int starty){
	// temp is the maximum length of the input string 	
	int temp[99]={},i=0,j;
	
	//the while loop puts puts the input array into a new array that has the exact length of the string
	while(str[i]!='\0') 
     7f0:	21 91       	ld	r18, Z+
     7f2:	21 11       	cpse	r18, r1
     7f4:	f8 cf       	rjmp	.-16     	; 0x7e6 <writeString+0x48>
	{
		temp[i]=str[i]; i++;
	}
	
	//this for loop runs through the temp array and displays one letter at the time.
	for(j=0;j<i;j++)
     7f6:	10 16       	cp	r1, r16
     7f8:	11 06       	cpc	r1, r17
     7fa:	1c f5       	brge	.+70     	; 0x842 <writeString+0xa4>
     7fc:	5a 01       	movw	r10, r20
     7fe:	6b 01       	movw	r12, r22
     800:	00 0f       	add	r16, r16
     802:	11 1f       	adc	r17, r17
     804:	e1 e0       	ldi	r30, 0x01	; 1
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	ec 0f       	add	r30, r28
     80a:	fd 1f       	adc	r31, r29
     80c:	0e 0f       	add	r16, r30
     80e:	1f 1f       	adc	r17, r31
	{
		// temp[] -33 to make it ASCII so it fits the bitMap
		int space = temp[j]-33;
     810:	d7 01       	movw	r26, r14
     812:	8d 91       	ld	r24, X+
     814:	9d 91       	ld	r25, X+
     816:	7d 01       	movw	r14, r26
     818:	81 97       	sbiw	r24, 0x21	; 33
		if (space != -1)
     81a:	8f 3f       	cpi	r24, 0xFF	; 255
     81c:	bf ef       	ldi	r27, 0xFF	; 255
     81e:	9b 07       	cpc	r25, r27
     820:	21 f0       	breq	.+8      	; 0x82a <writeString+0x8c>
		{
				getSymbolParameters(space,startx,starty);
     822:	a5 01       	movw	r20, r10
     824:	b6 01       	movw	r22, r12
     826:	70 df       	rcall	.-288    	; 0x708 <getSymbolParameters>
     828:	09 c0       	rjmp	.+18     	; 0x83c <writeString+0x9e>
		}
		else
		{
			//If space just move 6 bits on the x-axis
			start_x = start_x+6;
     82a:	80 91 8c 15 	lds	r24, 0x158C	; 0x80158c <start_x>
     82e:	90 91 8d 15 	lds	r25, 0x158D	; 0x80158d <start_x+0x1>
     832:	06 96       	adiw	r24, 0x06	; 6
     834:	90 93 8d 15 	sts	0x158D, r25	; 0x80158d <start_x+0x1>
     838:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <start_x>
	{
		temp[i]=str[i]; i++;
	}
	
	//this for loop runs through the temp array and displays one letter at the time.
	for(j=0;j<i;j++)
     83c:	0e 15       	cp	r16, r14
     83e:	1f 05       	cpc	r17, r15
     840:	39 f7       	brne	.-50     	; 0x810 <writeString+0x72>
			//If space just move 6 bits on the x-axis
			start_x = start_x+6;
		}
	}
	return 0;
}
     842:	ca 53       	subi	r28, 0x3A	; 58
     844:	df 4f       	sbci	r29, 0xFF	; 255
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	bf 90       	pop	r11
     862:	af 90       	pop	r10
     864:	08 95       	ret

00000866 <writeInt>:

void writeInt(long int num, int startX, int startY){
     866:	2f 92       	push	r2
     868:	3f 92       	push	r3
     86a:	4f 92       	push	r4
     86c:	5f 92       	push	r5
     86e:	6f 92       	push	r6
     870:	7f 92       	push	r7
     872:	8f 92       	push	r8
     874:	9f 92       	push	r9
     876:	af 92       	push	r10
     878:	bf 92       	push	r11
     87a:	cf 92       	push	r12
     87c:	df 92       	push	r13
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	2c 97       	sbiw	r28, 0x0c	; 12
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	4b 01       	movw	r8, r22
     89c:	5c 01       	movw	r10, r24
     89e:	6a 01       	movw	r12, r20
     8a0:	19 01       	movw	r2, r18
	// sets num flag
	int num_flag = 0;
	
	//maximum size of a number (999999)
	int number[6] = {num % 10 , (num/10) % 10 , (num/100) % 10 , (num/1000) % 10 , (num/10000) % 10 , (num/100000) % 10};
     8a2:	0f 2e       	mov	r0, r31
     8a4:	fa e0       	ldi	r31, 0x0A	; 10
     8a6:	4f 2e       	mov	r4, r31
     8a8:	51 2c       	mov	r5, r1
     8aa:	61 2c       	mov	r6, r1
     8ac:	71 2c       	mov	r7, r1
     8ae:	f0 2d       	mov	r31, r0
     8b0:	a3 01       	movw	r20, r6
     8b2:	92 01       	movw	r18, r4
     8b4:	00 d4       	rcall	.+2048   	; 0x10b6 <__divmodsi4>
     8b6:	7a 83       	std	Y+2, r23	; 0x02
     8b8:	69 83       	std	Y+1, r22	; 0x01
     8ba:	ca 01       	movw	r24, r20
     8bc:	b9 01       	movw	r22, r18
     8be:	a3 01       	movw	r20, r6
     8c0:	92 01       	movw	r18, r4
     8c2:	f9 d3       	rcall	.+2034   	; 0x10b6 <__divmodsi4>
     8c4:	7c 83       	std	Y+4, r23	; 0x04
     8c6:	6b 83       	std	Y+3, r22	; 0x03
     8c8:	c5 01       	movw	r24, r10
     8ca:	b4 01       	movw	r22, r8
     8cc:	24 e6       	ldi	r18, 0x64	; 100
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	f0 d3       	rcall	.+2016   	; 0x10b6 <__divmodsi4>
     8d6:	ca 01       	movw	r24, r20
     8d8:	b9 01       	movw	r22, r18
     8da:	a3 01       	movw	r20, r6
     8dc:	92 01       	movw	r18, r4
     8de:	eb d3       	rcall	.+2006   	; 0x10b6 <__divmodsi4>
     8e0:	7e 83       	std	Y+6, r23	; 0x06
     8e2:	6d 83       	std	Y+5, r22	; 0x05
     8e4:	c5 01       	movw	r24, r10
     8e6:	b4 01       	movw	r22, r8
     8e8:	28 ee       	ldi	r18, 0xE8	; 232
     8ea:	33 e0       	ldi	r19, 0x03	; 3
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	e2 d3       	rcall	.+1988   	; 0x10b6 <__divmodsi4>
     8f2:	ca 01       	movw	r24, r20
     8f4:	b9 01       	movw	r22, r18
     8f6:	a3 01       	movw	r20, r6
     8f8:	92 01       	movw	r18, r4
     8fa:	dd d3       	rcall	.+1978   	; 0x10b6 <__divmodsi4>
     8fc:	78 87       	std	Y+8, r23	; 0x08
     8fe:	6f 83       	std	Y+7, r22	; 0x07
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	20 e1       	ldi	r18, 0x10	; 16
     906:	37 e2       	ldi	r19, 0x27	; 39
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	d4 d3       	rcall	.+1960   	; 0x10b6 <__divmodsi4>
     90e:	ca 01       	movw	r24, r20
     910:	b9 01       	movw	r22, r18
     912:	a3 01       	movw	r20, r6
     914:	92 01       	movw	r18, r4
     916:	cf d3       	rcall	.+1950   	; 0x10b6 <__divmodsi4>
     918:	7a 87       	std	Y+10, r23	; 0x0a
     91a:	69 87       	std	Y+9, r22	; 0x09
     91c:	c5 01       	movw	r24, r10
     91e:	b4 01       	movw	r22, r8
     920:	20 ea       	ldi	r18, 0xA0	; 160
     922:	36 e8       	ldi	r19, 0x86	; 134
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	c6 d3       	rcall	.+1932   	; 0x10b6 <__divmodsi4>
     92a:	ca 01       	movw	r24, r20
     92c:	b9 01       	movw	r22, r18
     92e:	a3 01       	movw	r20, r6
     930:	92 01       	movw	r18, r4
     932:	c1 d3       	rcall	.+1922   	; 0x10b6 <__divmodsi4>
     934:	7c 87       	std	Y+12, r23	; 0x0c
     936:	6b 87       	std	Y+11, r22	; 0x0b
     938:	8e 01       	movw	r16, r28
     93a:	03 5f       	subi	r16, 0xF3	; 243
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	7c 01       	movw	r14, r24
	return 0;
}

void writeInt(long int num, int startX, int startY){
	// sets num flag
	int num_flag = 0;
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0

	//This for loop displays the number as MSB first, if the number is 0 and the num falg hasn't been set
	//it ignores that number and moves on the the next.
	for (int i = 5; i >= 0; i--)
	{
		if (number[i] != 0 | num_flag == 1 )
     948:	99 24       	eor	r9, r9
     94a:	93 94       	inc	r9
     94c:	81 2c       	mov	r8, r1
		{
			//number[i]+15 to make it fir the bit map.
			getSymbolParameters(number[i]+15,startX,startY);
			num_flag = 1;
     94e:	66 24       	eor	r6, r6
     950:	63 94       	inc	r6
     952:	71 2c       	mov	r7, r1

	//This for loop displays the number as MSB first, if the number is 0 and the num falg hasn't been set
	//it ignores that number and moves on the the next.
	for (int i = 5; i >= 0; i--)
	{
		if (number[i] != 0 | num_flag == 1 )
     954:	f8 01       	movw	r30, r16
     956:	32 91       	ld	r19, -Z
     958:	22 91       	ld	r18, -Z
     95a:	8f 01       	movw	r16, r30
     95c:	99 2d       	mov	r25, r9
     95e:	21 15       	cp	r18, r1
     960:	31 05       	cpc	r19, r1
     962:	09 f4       	brne	.+2      	; 0x966 <writeInt+0x100>
     964:	98 2d       	mov	r25, r8
     966:	91 11       	cpse	r25, r1
     968:	07 c0       	rjmp	.+14     	; 0x978 <writeInt+0x112>
     96a:	99 2d       	mov	r25, r9
     96c:	41 30       	cpi	r20, 0x01	; 1
     96e:	51 05       	cpc	r21, r1
     970:	09 f0       	breq	.+2      	; 0x974 <writeInt+0x10e>
     972:	98 2d       	mov	r25, r8
     974:	99 23       	and	r25, r25
		{
			//number[i]+15 to make it fir the bit map.
			getSymbolParameters(number[i]+15,startX,startY);
     976:	39 f0       	breq	.+14     	; 0x986 <writeInt+0x120>
     978:	a1 01       	movw	r20, r2
     97a:	b6 01       	movw	r22, r12
     97c:	c9 01       	movw	r24, r18
     97e:	0f 96       	adiw	r24, 0x0f	; 15
     980:	c3 de       	rcall	.-634    	; 0x708 <getSymbolParameters>
			num_flag = 1;
     982:	46 2d       	mov	r20, r6
     984:	57 2d       	mov	r21, r7
	//maximum size of a number (999999)
	int number[6] = {num % 10 , (num/10) % 10 , (num/100) % 10 , (num/1000) % 10 , (num/10000) % 10 , (num/100000) % 10};

	//This for loop displays the number as MSB first, if the number is 0 and the num falg hasn't been set
	//it ignores that number and moves on the the next.
	for (int i = 5; i >= 0; i--)
     986:	0e 15       	cp	r16, r14
     988:	1f 05       	cpc	r17, r15
     98a:	21 f7       	brne	.-56     	; 0x954 <writeInt+0xee>
			//number[i]+15 to make it fir the bit map.
			getSymbolParameters(number[i]+15,startX,startY);
			num_flag = 1;
		}
	}
	start_x = startX;
     98c:	d0 92 8d 15 	sts	0x158D, r13	; 0x80158d <start_x+0x1>
     990:	c0 92 8c 15 	sts	0x158C, r12	; 0x80158c <start_x>

}
     994:	2c 96       	adiw	r28, 0x0c	; 12
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	7f 90       	pop	r7
     9ba:	6f 90       	pop	r6
     9bc:	5f 90       	pop	r5
     9be:	4f 90       	pop	r4
     9c0:	3f 90       	pop	r3
     9c2:	2f 90       	pop	r2
     9c4:	08 95       	ret

000009c6 <drawRed>:

void drawRed(int count, int height, int realHeight){
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	ef 92       	push	r14
     9ce:	0f 93       	push	r16
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	eb 01       	movw	r28, r22
     9d6:	5a 01       	movw	r10, r20
	int _realHeight = 139 - realHeight;
	writeInt(count,140,60+_realHeight);
     9d8:	27 ec       	ldi	r18, 0xC7	; 199
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	24 1b       	sub	r18, r20
     9de:	35 0b       	sbc	r19, r21
     9e0:	bc 01       	movw	r22, r24
     9e2:	99 0f       	add	r25, r25
     9e4:	88 0b       	sbc	r24, r24
     9e6:	99 0b       	sbc	r25, r25
     9e8:	4c e8       	ldi	r20, 0x8C	; 140
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	3c df       	rcall	.-392    	; 0x866 <writeInt>
	FillRectangle(130,100+_realHeight,50,height-_realHeight,31,31,63);
     9ee:	ca 0d       	add	r28, r10
     9f0:	db 1d       	adc	r29, r11
     9f2:	cb 58       	subi	r28, 0x8B	; 139
     9f4:	d1 09       	sbc	r29, r1
     9f6:	8f ee       	ldi	r24, 0xEF	; 239
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	9c 01       	movw	r18, r24
     9fc:	2a 19       	sub	r18, r10
     9fe:	3b 09       	sbc	r19, r11
     a00:	59 01       	movw	r10, r18
     a02:	0f 2e       	mov	r0, r31
     a04:	ff e3       	ldi	r31, 0x3F	; 63
     a06:	cf 2e       	mov	r12, r31
     a08:	f0 2d       	mov	r31, r0
     a0a:	0f 2e       	mov	r0, r31
     a0c:	ff e1       	ldi	r31, 0x1F	; 31
     a0e:	ef 2e       	mov	r14, r31
     a10:	f0 2d       	mov	r31, r0
     a12:	0f e1       	ldi	r16, 0x1F	; 31
     a14:	9e 01       	movw	r18, r28
     a16:	42 e3       	ldi	r20, 0x32	; 50
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	b5 01       	movw	r22, r10
     a1c:	82 e8       	ldi	r24, 0x82	; 130
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	95 dd       	rcall	.-1238   	; 0x54c <FillRectangle>
	FillRectangle(130,100+_realHeight,50,height-_realHeight,31,0,0);
     a22:	c1 2c       	mov	r12, r1
     a24:	e1 2c       	mov	r14, r1
     a26:	9e 01       	movw	r18, r28
     a28:	42 e3       	ldi	r20, 0x32	; 50
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	b5 01       	movw	r22, r10
     a2e:	82 e8       	ldi	r24, 0x82	; 130
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	8c dd       	rcall	.-1256   	; 0x54c <FillRectangle>
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	0f 91       	pop	r16
     a3a:	ef 90       	pop	r14
     a3c:	cf 90       	pop	r12
     a3e:	bf 90       	pop	r11
     a40:	af 90       	pop	r10
     a42:	08 95       	ret

00000a44 <drawGreen>:

void drawGreen(int count, int height, int realHeight){
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	ef 92       	push	r14
     a4c:	0f 93       	push	r16
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	eb 01       	movw	r28, r22
     a54:	5a 01       	movw	r10, r20
	int _realHeight = 139 - realHeight;
	writeInt(count,40,60+_realHeight);
     a56:	27 ec       	ldi	r18, 0xC7	; 199
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	24 1b       	sub	r18, r20
     a5c:	35 0b       	sbc	r19, r21
     a5e:	bc 01       	movw	r22, r24
     a60:	99 0f       	add	r25, r25
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	48 e2       	ldi	r20, 0x28	; 40
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	fd de       	rcall	.-518    	; 0x866 <writeInt>
	FillRectangle(30,100+_realHeight,50,height-_realHeight,31,31,63);
     a6c:	ca 0d       	add	r28, r10
     a6e:	db 1d       	adc	r29, r11
     a70:	cb 58       	subi	r28, 0x8B	; 139
     a72:	d1 09       	sbc	r29, r1
     a74:	8f ee       	ldi	r24, 0xEF	; 239
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	9c 01       	movw	r18, r24
     a7a:	2a 19       	sub	r18, r10
     a7c:	3b 09       	sbc	r19, r11
     a7e:	59 01       	movw	r10, r18
     a80:	0f 2e       	mov	r0, r31
     a82:	ff e3       	ldi	r31, 0x3F	; 63
     a84:	cf 2e       	mov	r12, r31
     a86:	f0 2d       	mov	r31, r0
     a88:	0f 2e       	mov	r0, r31
     a8a:	ff e1       	ldi	r31, 0x1F	; 31
     a8c:	ef 2e       	mov	r14, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	0f e1       	ldi	r16, 0x1F	; 31
     a92:	9e 01       	movw	r18, r28
     a94:	42 e3       	ldi	r20, 0x32	; 50
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	b5 01       	movw	r22, r10
     a9a:	8e e1       	ldi	r24, 0x1E	; 30
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	56 dd       	rcall	.-1364   	; 0x54c <FillRectangle>
	FillRectangle(30,100+_realHeight,50,height-_realHeight,0,31,0);
     aa0:	c1 2c       	mov	r12, r1
     aa2:	00 e0       	ldi	r16, 0x00	; 0
     aa4:	9e 01       	movw	r18, r28
     aa6:	42 e3       	ldi	r20, 0x32	; 50
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	b5 01       	movw	r22, r10
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	4d dd       	rcall	.-1382   	; 0x54c <FillRectangle>
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	0f 91       	pop	r16
     ab8:	ef 90       	pop	r14
     aba:	cf 90       	pop	r12
     abc:	bf 90       	pop	r11
     abe:	af 90       	pop	r10
     ac0:	08 95       	ret

00000ac2 <drawBlue>:

void drawBlue(int count, int height, int realHeight){
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	ef 92       	push	r14
     aca:	0f 93       	push	r16
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	eb 01       	movw	r28, r22
     ad2:	5a 01       	movw	r10, r20
	int _realHeight = 139 - realHeight;
	writeInt(count,240,60+_realHeight);
     ad4:	27 ec       	ldi	r18, 0xC7	; 199
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	24 1b       	sub	r18, r20
     ada:	35 0b       	sbc	r19, r21
     adc:	bc 01       	movw	r22, r24
     ade:	99 0f       	add	r25, r25
     ae0:	88 0b       	sbc	r24, r24
     ae2:	99 0b       	sbc	r25, r25
     ae4:	40 ef       	ldi	r20, 0xF0	; 240
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	be de       	rcall	.-644    	; 0x866 <writeInt>
	FillRectangle(230,100+_realHeight,50,height-_realHeight,31,31,63);
     aea:	ca 0d       	add	r28, r10
     aec:	db 1d       	adc	r29, r11
     aee:	cb 58       	subi	r28, 0x8B	; 139
     af0:	d1 09       	sbc	r29, r1
     af2:	8f ee       	ldi	r24, 0xEF	; 239
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	9c 01       	movw	r18, r24
     af8:	2a 19       	sub	r18, r10
     afa:	3b 09       	sbc	r19, r11
     afc:	59 01       	movw	r10, r18
     afe:	0f 2e       	mov	r0, r31
     b00:	ff e3       	ldi	r31, 0x3F	; 63
     b02:	cf 2e       	mov	r12, r31
     b04:	f0 2d       	mov	r31, r0
     b06:	0f 2e       	mov	r0, r31
     b08:	ff e1       	ldi	r31, 0x1F	; 31
     b0a:	ef 2e       	mov	r14, r31
     b0c:	f0 2d       	mov	r31, r0
     b0e:	0f e1       	ldi	r16, 0x1F	; 31
     b10:	9e 01       	movw	r18, r28
     b12:	42 e3       	ldi	r20, 0x32	; 50
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	b5 01       	movw	r22, r10
     b18:	86 ee       	ldi	r24, 0xE6	; 230
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	17 dd       	rcall	.-1490   	; 0x54c <FillRectangle>
	FillRectangle(230,100+_realHeight,50,height-_realHeight,0,0,31);
     b1e:	0f 2e       	mov	r0, r31
     b20:	ff e1       	ldi	r31, 0x1F	; 31
     b22:	cf 2e       	mov	r12, r31
     b24:	f0 2d       	mov	r31, r0
     b26:	e1 2c       	mov	r14, r1
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	9e 01       	movw	r18, r28
     b2c:	42 e3       	ldi	r20, 0x32	; 50
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	b5 01       	movw	r22, r10
     b32:	86 ee       	ldi	r24, 0xE6	; 230
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0a dd       	rcall	.-1516   	; 0x54c <FillRectangle>
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	0f 91       	pop	r16
     b3e:	ef 90       	pop	r14
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	af 90       	pop	r10
     b46:	08 95       	ret

00000b48 <drawTotal>:

void drawTotal(float Red, float Green, float Blue){
     b48:	4f 92       	push	r4
     b4a:	5f 92       	push	r5
     b4c:	6f 92       	push	r6
     b4e:	7f 92       	push	r7
     b50:	8f 92       	push	r8
     b52:	9f 92       	push	r9
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	2c 97       	sbiw	r28, 0x0c	; 12
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	2b 01       	movw	r4, r22
     b7a:	3c 01       	movw	r6, r24
     b7c:	29 83       	std	Y+1, r18	; 0x01
     b7e:	3a 83       	std	Y+2, r19	; 0x02
     b80:	4b 83       	std	Y+3, r20	; 0x03
     b82:	5c 83       	std	Y+4, r21	; 0x04
     b84:	ed 82       	std	Y+5, r14	; 0x05
     b86:	fe 82       	std	Y+6, r15	; 0x06
     b88:	0f 83       	std	Y+7, r16	; 0x07
     b8a:	18 87       	std	Y+8, r17	; 0x08
	int totalCount = Red + Green + Blue;
     b8c:	84 d0       	rcall	.+264    	; 0xc96 <__addsf3>
     b8e:	a8 01       	movw	r20, r16
     b90:	97 01       	movw	r18, r14
     b92:	81 d0       	rcall	.+258    	; 0xc96 <__addsf3>
     b94:	4c d1       	rcall	.+664    	; 0xe2e <__fixsfsi>
	
	int heightRed = (Red/totalCount)*139;
     b96:	6b 01       	movw	r12, r22
     b98:	77 0f       	add	r23, r23
     b9a:	ee 08       	sbc	r14, r14
     b9c:	ff 08       	sbc	r15, r15
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	78 d1       	rcall	.+752    	; 0xe94 <__floatsisf>
     ba4:	4b 01       	movw	r8, r22
     ba6:	5c 01       	movw	r10, r24
	int heightGreen = (Green/totalCount)*139;
	int heightBlue = (Blue/totalCount)*139;
	
	
	
	drawRed(Red, 139, heightRed);
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	c3 01       	movw	r24, r6
     bae:	b2 01       	movw	r22, r4
     bb0:	d6 d0       	rcall	.+428    	; 0xd5e <__divsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	4b e0       	ldi	r20, 0x0B	; 11
     bb8:	53 e4       	ldi	r21, 0x43	; 67
     bba:	f8 d1       	rcall	.+1008   	; 0xfac <__mulsf3>
     bbc:	38 d1       	rcall	.+624    	; 0xe2e <__fixsfsi>
     bbe:	69 87       	std	Y+9, r22	; 0x09
     bc0:	7a 87       	std	Y+10, r23	; 0x0a
     bc2:	8b 87       	std	Y+11, r24	; 0x0b
     bc4:	9c 87       	std	Y+12, r25	; 0x0c
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	31 d1       	rcall	.+610    	; 0xe2e <__fixsfsi>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	49 85       	ldd	r20, Y+9	; 0x09
     bd2:	5a 85       	ldd	r21, Y+10	; 0x0a
     bd4:	6b e8       	ldi	r22, 0x8B	; 139
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	f6 de       	rcall	.-532    	; 0x9c6 <drawRed>
	drawGreen(Green, 139, heightGreen);
     bda:	a5 01       	movw	r20, r10
     bdc:	94 01       	movw	r18, r8
     bde:	69 81       	ldd	r22, Y+1	; 0x01
     be0:	7a 81       	ldd	r23, Y+2	; 0x02
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	bb d0       	rcall	.+374    	; 0xd5e <__divsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	4b e0       	ldi	r20, 0x0B	; 11
     bee:	53 e4       	ldi	r21, 0x43	; 67
     bf0:	dd d1       	rcall	.+954    	; 0xfac <__mulsf3>
     bf2:	1d d1       	rcall	.+570    	; 0xe2e <__fixsfsi>
     bf4:	2b 01       	movw	r4, r22
     bf6:	3c 01       	movw	r6, r24
     bf8:	69 81       	ldd	r22, Y+1	; 0x01
     bfa:	7a 81       	ldd	r23, Y+2	; 0x02
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	16 d1       	rcall	.+556    	; 0xe2e <__fixsfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	a2 01       	movw	r20, r4
     c08:	6b e8       	ldi	r22, 0x8B	; 139
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	1b df       	rcall	.-458    	; 0xa44 <drawGreen>
	drawBlue(Blue, 139, heightBlue);
     c0e:	a5 01       	movw	r20, r10
     c10:	94 01       	movw	r18, r8
     c12:	6d 81       	ldd	r22, Y+5	; 0x05
     c14:	7e 81       	ldd	r23, Y+6	; 0x06
     c16:	8f 81       	ldd	r24, Y+7	; 0x07
     c18:	98 85       	ldd	r25, Y+8	; 0x08
     c1a:	a1 d0       	rcall	.+322    	; 0xd5e <__divsf3>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	4b e0       	ldi	r20, 0x0B	; 11
     c22:	53 e4       	ldi	r21, 0x43	; 67
     c24:	c3 d1       	rcall	.+902    	; 0xfac <__mulsf3>
     c26:	03 d1       	rcall	.+518    	; 0xe2e <__fixsfsi>
     c28:	4b 01       	movw	r8, r22
     c2a:	5c 01       	movw	r10, r24
     c2c:	6d 81       	ldd	r22, Y+5	; 0x05
     c2e:	7e 81       	ldd	r23, Y+6	; 0x06
     c30:	8f 81       	ldd	r24, Y+7	; 0x07
     c32:	98 85       	ldd	r25, Y+8	; 0x08
     c34:	fc d0       	rcall	.+504    	; 0xe2e <__fixsfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	a4 01       	movw	r20, r8
     c3c:	6b e8       	ldi	r22, 0x8B	; 139
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	40 df       	rcall	.-384    	; 0xac2 <drawBlue>
     c42:	2a e0       	ldi	r18, 0x0A	; 10
     c44:	30 e0       	ldi	r19, 0x00	; 0
	
	writeInt(totalCount, 250, 10);
     c46:	4a ef       	ldi	r20, 0xFA	; 250
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	c7 01       	movw	r24, r14
     c4c:	b6 01       	movw	r22, r12
     c4e:	0b de       	rcall	.-1002   	; 0x866 <writeInt>
     c50:	2c 96       	adiw	r28, 0x0c	; 12
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
	
}
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	bf 90       	pop	r11
     c6e:	af 90       	pop	r10
     c70:	9f 90       	pop	r9
     c72:	8f 90       	pop	r8
     c74:	7f 90       	pop	r7
     c76:	6f 90       	pop	r6
     c78:	5f 90       	pop	r5
     c7a:	4f 90       	pop	r4
     c7c:	08 95       	ret

00000c7e <initEXTInterrupt>:
     c7e:	53 9a       	sbi	0x0a, 3	; 10
     c80:	8b b1       	in	r24, 0x0b	; 11
     c82:	8b b9       	out	0x0b, r24	; 11
	//Sets button pin as input with internal pullup resistor
	DDRD |= 0b00001000;
	PORTD |= 0b00000000;
	
	//Trigger on falling edge, activate external intterupt on ISR3
	EICRA |= 0b10000000;
     c84:	e9 e6       	ldi	r30, 0x69	; 105
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	80 83       	st	Z, r24
	EIMSK |= 0b00001000;
     c8e:	eb 9a       	sbi	0x1d, 3	; 29
	
	//Enable interrupt
	sei();
     c90:	78 94       	sei
     c92:	08 95       	ret

00000c94 <__subsf3>:
     c94:	50 58       	subi	r21, 0x80	; 128

00000c96 <__addsf3>:
     c96:	bb 27       	eor	r27, r27
     c98:	aa 27       	eor	r26, r26
     c9a:	0e d0       	rcall	.+28     	; 0xcb8 <__addsf3x>
     c9c:	4d c1       	rjmp	.+666    	; 0xf38 <__fp_round>
     c9e:	3e d1       	rcall	.+636    	; 0xf1c <__fp_pscA>
     ca0:	30 f0       	brcs	.+12     	; 0xcae <__addsf3+0x18>
     ca2:	43 d1       	rcall	.+646    	; 0xf2a <__fp_pscB>
     ca4:	20 f0       	brcs	.+8      	; 0xcae <__addsf3+0x18>
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <__addsf3+0x1e>
     ca8:	9f 3f       	cpi	r25, 0xFF	; 255
     caa:	11 f4       	brne	.+4      	; 0xcb0 <__addsf3+0x1a>
     cac:	1e f4       	brtc	.+6      	; 0xcb4 <__addsf3+0x1e>
     cae:	33 c1       	rjmp	.+614    	; 0xf16 <__fp_nan>
     cb0:	0e f4       	brtc	.+2      	; 0xcb4 <__addsf3+0x1e>
     cb2:	e0 95       	com	r30
     cb4:	e7 fb       	bst	r30, 7
     cb6:	29 c1       	rjmp	.+594    	; 0xf0a <__fp_inf>

00000cb8 <__addsf3x>:
     cb8:	e9 2f       	mov	r30, r25
     cba:	4f d1       	rcall	.+670    	; 0xf5a <__fp_split3>
     cbc:	80 f3       	brcs	.-32     	; 0xc9e <__addsf3+0x8>
     cbe:	ba 17       	cp	r27, r26
     cc0:	62 07       	cpc	r22, r18
     cc2:	73 07       	cpc	r23, r19
     cc4:	84 07       	cpc	r24, r20
     cc6:	95 07       	cpc	r25, r21
     cc8:	18 f0       	brcs	.+6      	; 0xcd0 <__addsf3x+0x18>
     cca:	71 f4       	brne	.+28     	; 0xce8 <__addsf3x+0x30>
     ccc:	9e f5       	brtc	.+102    	; 0xd34 <__addsf3x+0x7c>
     cce:	67 c1       	rjmp	.+718    	; 0xf9e <__fp_zero>
     cd0:	0e f4       	brtc	.+2      	; 0xcd4 <__addsf3x+0x1c>
     cd2:	e0 95       	com	r30
     cd4:	0b 2e       	mov	r0, r27
     cd6:	ba 2f       	mov	r27, r26
     cd8:	a0 2d       	mov	r26, r0
     cda:	0b 01       	movw	r0, r22
     cdc:	b9 01       	movw	r22, r18
     cde:	90 01       	movw	r18, r0
     ce0:	0c 01       	movw	r0, r24
     ce2:	ca 01       	movw	r24, r20
     ce4:	a0 01       	movw	r20, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	ff 27       	eor	r31, r31
     cea:	59 1b       	sub	r21, r25
     cec:	99 f0       	breq	.+38     	; 0xd14 <__addsf3x+0x5c>
     cee:	59 3f       	cpi	r21, 0xF9	; 249
     cf0:	50 f4       	brcc	.+20     	; 0xd06 <__addsf3x+0x4e>
     cf2:	50 3e       	cpi	r21, 0xE0	; 224
     cf4:	68 f1       	brcs	.+90     	; 0xd50 <__addsf3x+0x98>
     cf6:	1a 16       	cp	r1, r26
     cf8:	f0 40       	sbci	r31, 0x00	; 0
     cfa:	a2 2f       	mov	r26, r18
     cfc:	23 2f       	mov	r18, r19
     cfe:	34 2f       	mov	r19, r20
     d00:	44 27       	eor	r20, r20
     d02:	58 5f       	subi	r21, 0xF8	; 248
     d04:	f3 cf       	rjmp	.-26     	; 0xcec <__addsf3x+0x34>
     d06:	46 95       	lsr	r20
     d08:	37 95       	ror	r19
     d0a:	27 95       	ror	r18
     d0c:	a7 95       	ror	r26
     d0e:	f0 40       	sbci	r31, 0x00	; 0
     d10:	53 95       	inc	r21
     d12:	c9 f7       	brne	.-14     	; 0xd06 <__addsf3x+0x4e>
     d14:	7e f4       	brtc	.+30     	; 0xd34 <__addsf3x+0x7c>
     d16:	1f 16       	cp	r1, r31
     d18:	ba 0b       	sbc	r27, r26
     d1a:	62 0b       	sbc	r22, r18
     d1c:	73 0b       	sbc	r23, r19
     d1e:	84 0b       	sbc	r24, r20
     d20:	ba f0       	brmi	.+46     	; 0xd50 <__addsf3x+0x98>
     d22:	91 50       	subi	r25, 0x01	; 1
     d24:	a1 f0       	breq	.+40     	; 0xd4e <__addsf3x+0x96>
     d26:	ff 0f       	add	r31, r31
     d28:	bb 1f       	adc	r27, r27
     d2a:	66 1f       	adc	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	88 1f       	adc	r24, r24
     d30:	c2 f7       	brpl	.-16     	; 0xd22 <__addsf3x+0x6a>
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <__addsf3x+0x98>
     d34:	ba 0f       	add	r27, r26
     d36:	62 1f       	adc	r22, r18
     d38:	73 1f       	adc	r23, r19
     d3a:	84 1f       	adc	r24, r20
     d3c:	48 f4       	brcc	.+18     	; 0xd50 <__addsf3x+0x98>
     d3e:	87 95       	ror	r24
     d40:	77 95       	ror	r23
     d42:	67 95       	ror	r22
     d44:	b7 95       	ror	r27
     d46:	f7 95       	ror	r31
     d48:	9e 3f       	cpi	r25, 0xFE	; 254
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <__addsf3x+0x96>
     d4c:	b3 cf       	rjmp	.-154    	; 0xcb4 <__addsf3+0x1e>
     d4e:	93 95       	inc	r25
     d50:	88 0f       	add	r24, r24
     d52:	08 f0       	brcs	.+2      	; 0xd56 <__addsf3x+0x9e>
     d54:	99 27       	eor	r25, r25
     d56:	ee 0f       	add	r30, r30
     d58:	97 95       	ror	r25
     d5a:	87 95       	ror	r24
     d5c:	08 95       	ret

00000d5e <__divsf3>:
     d5e:	0c d0       	rcall	.+24     	; 0xd78 <__divsf3x>
     d60:	eb c0       	rjmp	.+470    	; 0xf38 <__fp_round>
     d62:	e3 d0       	rcall	.+454    	; 0xf2a <__fp_pscB>
     d64:	40 f0       	brcs	.+16     	; 0xd76 <__divsf3+0x18>
     d66:	da d0       	rcall	.+436    	; 0xf1c <__fp_pscA>
     d68:	30 f0       	brcs	.+12     	; 0xd76 <__divsf3+0x18>
     d6a:	21 f4       	brne	.+8      	; 0xd74 <__divsf3+0x16>
     d6c:	5f 3f       	cpi	r21, 0xFF	; 255
     d6e:	19 f0       	breq	.+6      	; 0xd76 <__divsf3+0x18>
     d70:	cc c0       	rjmp	.+408    	; 0xf0a <__fp_inf>
     d72:	51 11       	cpse	r21, r1
     d74:	15 c1       	rjmp	.+554    	; 0xfa0 <__fp_szero>
     d76:	cf c0       	rjmp	.+414    	; 0xf16 <__fp_nan>

00000d78 <__divsf3x>:
     d78:	f0 d0       	rcall	.+480    	; 0xf5a <__fp_split3>
     d7a:	98 f3       	brcs	.-26     	; 0xd62 <__divsf3+0x4>

00000d7c <__divsf3_pse>:
     d7c:	99 23       	and	r25, r25
     d7e:	c9 f3       	breq	.-14     	; 0xd72 <__divsf3+0x14>
     d80:	55 23       	and	r21, r21
     d82:	b1 f3       	breq	.-20     	; 0xd70 <__divsf3+0x12>
     d84:	95 1b       	sub	r25, r21
     d86:	55 0b       	sbc	r21, r21
     d88:	bb 27       	eor	r27, r27
     d8a:	aa 27       	eor	r26, r26
     d8c:	62 17       	cp	r22, r18
     d8e:	73 07       	cpc	r23, r19
     d90:	84 07       	cpc	r24, r20
     d92:	38 f0       	brcs	.+14     	; 0xda2 <__divsf3_pse+0x26>
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	44 1f       	adc	r20, r20
     d9e:	aa 1f       	adc	r26, r26
     da0:	a9 f3       	breq	.-22     	; 0xd8c <__divsf3_pse+0x10>
     da2:	33 d0       	rcall	.+102    	; 0xe0a <__divsf3_pse+0x8e>
     da4:	0e 2e       	mov	r0, r30
     da6:	3a f0       	brmi	.+14     	; 0xdb6 <__divsf3_pse+0x3a>
     da8:	e0 e8       	ldi	r30, 0x80	; 128
     daa:	30 d0       	rcall	.+96     	; 0xe0c <__divsf3_pse+0x90>
     dac:	91 50       	subi	r25, 0x01	; 1
     dae:	50 40       	sbci	r21, 0x00	; 0
     db0:	e6 95       	lsr	r30
     db2:	00 1c       	adc	r0, r0
     db4:	ca f7       	brpl	.-14     	; 0xda8 <__divsf3_pse+0x2c>
     db6:	29 d0       	rcall	.+82     	; 0xe0a <__divsf3_pse+0x8e>
     db8:	fe 2f       	mov	r31, r30
     dba:	27 d0       	rcall	.+78     	; 0xe0a <__divsf3_pse+0x8e>
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	bb 1f       	adc	r27, r27
     dc4:	26 17       	cp	r18, r22
     dc6:	37 07       	cpc	r19, r23
     dc8:	48 07       	cpc	r20, r24
     dca:	ab 07       	cpc	r26, r27
     dcc:	b0 e8       	ldi	r27, 0x80	; 128
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__divsf3_pse+0x56>
     dd0:	bb 0b       	sbc	r27, r27
     dd2:	80 2d       	mov	r24, r0
     dd4:	bf 01       	movw	r22, r30
     dd6:	ff 27       	eor	r31, r31
     dd8:	93 58       	subi	r25, 0x83	; 131
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	2a f0       	brmi	.+10     	; 0xde8 <__divsf3_pse+0x6c>
     dde:	9e 3f       	cpi	r25, 0xFE	; 254
     de0:	51 05       	cpc	r21, r1
     de2:	68 f0       	brcs	.+26     	; 0xdfe <__divsf3_pse+0x82>
     de4:	92 c0       	rjmp	.+292    	; 0xf0a <__fp_inf>
     de6:	dc c0       	rjmp	.+440    	; 0xfa0 <__fp_szero>
     de8:	5f 3f       	cpi	r21, 0xFF	; 255
     dea:	ec f3       	brlt	.-6      	; 0xde6 <__divsf3_pse+0x6a>
     dec:	98 3e       	cpi	r25, 0xE8	; 232
     dee:	dc f3       	brlt	.-10     	; 0xde6 <__divsf3_pse+0x6a>
     df0:	86 95       	lsr	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	f7 95       	ror	r31
     dfa:	9f 5f       	subi	r25, 0xFF	; 255
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__divsf3_pse+0x74>
     dfe:	88 0f       	add	r24, r24
     e00:	91 1d       	adc	r25, r1
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	97 f9       	bld	r25, 7
     e08:	08 95       	ret
     e0a:	e1 e0       	ldi	r30, 0x01	; 1
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	88 1f       	adc	r24, r24
     e12:	bb 1f       	adc	r27, r27
     e14:	62 17       	cp	r22, r18
     e16:	73 07       	cpc	r23, r19
     e18:	84 07       	cpc	r24, r20
     e1a:	ba 07       	cpc	r27, r26
     e1c:	20 f0       	brcs	.+8      	; 0xe26 <__divsf3_pse+0xaa>
     e1e:	62 1b       	sub	r22, r18
     e20:	73 0b       	sbc	r23, r19
     e22:	84 0b       	sbc	r24, r20
     e24:	ba 0b       	sbc	r27, r26
     e26:	ee 1f       	adc	r30, r30
     e28:	88 f7       	brcc	.-30     	; 0xe0c <__divsf3_pse+0x90>
     e2a:	e0 95       	com	r30
     e2c:	08 95       	ret

00000e2e <__fixsfsi>:
     e2e:	04 d0       	rcall	.+8      	; 0xe38 <__fixunssfsi>
     e30:	68 94       	set
     e32:	b1 11       	cpse	r27, r1
     e34:	b5 c0       	rjmp	.+362    	; 0xfa0 <__fp_szero>
     e36:	08 95       	ret

00000e38 <__fixunssfsi>:
     e38:	98 d0       	rcall	.+304    	; 0xf6a <__fp_splitA>
     e3a:	88 f0       	brcs	.+34     	; 0xe5e <__fixunssfsi+0x26>
     e3c:	9f 57       	subi	r25, 0x7F	; 127
     e3e:	90 f0       	brcs	.+36     	; 0xe64 <__fixunssfsi+0x2c>
     e40:	b9 2f       	mov	r27, r25
     e42:	99 27       	eor	r25, r25
     e44:	b7 51       	subi	r27, 0x17	; 23
     e46:	a0 f0       	brcs	.+40     	; 0xe70 <__fixunssfsi+0x38>
     e48:	d1 f0       	breq	.+52     	; 0xe7e <__fixunssfsi+0x46>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	1a f0       	brmi	.+6      	; 0xe5a <__fixunssfsi+0x22>
     e54:	ba 95       	dec	r27
     e56:	c9 f7       	brne	.-14     	; 0xe4a <__fixunssfsi+0x12>
     e58:	12 c0       	rjmp	.+36     	; 0xe7e <__fixunssfsi+0x46>
     e5a:	b1 30       	cpi	r27, 0x01	; 1
     e5c:	81 f0       	breq	.+32     	; 0xe7e <__fixunssfsi+0x46>
     e5e:	9f d0       	rcall	.+318    	; 0xf9e <__fp_zero>
     e60:	b1 e0       	ldi	r27, 0x01	; 1
     e62:	08 95       	ret
     e64:	9c c0       	rjmp	.+312    	; 0xf9e <__fp_zero>
     e66:	67 2f       	mov	r22, r23
     e68:	78 2f       	mov	r23, r24
     e6a:	88 27       	eor	r24, r24
     e6c:	b8 5f       	subi	r27, 0xF8	; 248
     e6e:	39 f0       	breq	.+14     	; 0xe7e <__fixunssfsi+0x46>
     e70:	b9 3f       	cpi	r27, 0xF9	; 249
     e72:	cc f3       	brlt	.-14     	; 0xe66 <__fixunssfsi+0x2e>
     e74:	86 95       	lsr	r24
     e76:	77 95       	ror	r23
     e78:	67 95       	ror	r22
     e7a:	b3 95       	inc	r27
     e7c:	d9 f7       	brne	.-10     	; 0xe74 <__fixunssfsi+0x3c>
     e7e:	3e f4       	brtc	.+14     	; 0xe8e <__fixunssfsi+0x56>
     e80:	90 95       	com	r25
     e82:	80 95       	com	r24
     e84:	70 95       	com	r23
     e86:	61 95       	neg	r22
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	08 95       	ret

00000e90 <__floatunsisf>:
     e90:	e8 94       	clt
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <__floatsisf+0x12>

00000e94 <__floatsisf>:
     e94:	97 fb       	bst	r25, 7
     e96:	3e f4       	brtc	.+14     	; 0xea6 <__floatsisf+0x12>
     e98:	90 95       	com	r25
     e9a:	80 95       	com	r24
     e9c:	70 95       	com	r23
     e9e:	61 95       	neg	r22
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	99 23       	and	r25, r25
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <__floatsisf+0x40>
     eaa:	f9 2f       	mov	r31, r25
     eac:	96 e9       	ldi	r25, 0x96	; 150
     eae:	bb 27       	eor	r27, r27
     eb0:	93 95       	inc	r25
     eb2:	f6 95       	lsr	r31
     eb4:	87 95       	ror	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	b7 95       	ror	r27
     ebc:	f1 11       	cpse	r31, r1
     ebe:	f8 cf       	rjmp	.-16     	; 0xeb0 <__floatsisf+0x1c>
     ec0:	fa f4       	brpl	.+62     	; 0xf00 <__floatsisf+0x6c>
     ec2:	bb 0f       	add	r27, r27
     ec4:	11 f4       	brne	.+4      	; 0xeca <__floatsisf+0x36>
     ec6:	60 ff       	sbrs	r22, 0
     ec8:	1b c0       	rjmp	.+54     	; 0xf00 <__floatsisf+0x6c>
     eca:	6f 5f       	subi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <__floatsisf+0x6c>
     ed4:	88 23       	and	r24, r24
     ed6:	11 f0       	breq	.+4      	; 0xedc <__floatsisf+0x48>
     ed8:	96 e9       	ldi	r25, 0x96	; 150
     eda:	11 c0       	rjmp	.+34     	; 0xefe <__floatsisf+0x6a>
     edc:	77 23       	and	r23, r23
     ede:	21 f0       	breq	.+8      	; 0xee8 <__floatsisf+0x54>
     ee0:	9e e8       	ldi	r25, 0x8E	; 142
     ee2:	87 2f       	mov	r24, r23
     ee4:	76 2f       	mov	r23, r22
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <__floatsisf+0x5e>
     ee8:	66 23       	and	r22, r22
     eea:	71 f0       	breq	.+28     	; 0xf08 <__floatsisf+0x74>
     eec:	96 e8       	ldi	r25, 0x86	; 134
     eee:	86 2f       	mov	r24, r22
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	2a f0       	brmi	.+10     	; 0xf00 <__floatsisf+0x6c>
     ef6:	9a 95       	dec	r25
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	da f7       	brpl	.-10     	; 0xef6 <__floatsisf+0x62>
     f00:	88 0f       	add	r24, r24
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	97 f9       	bld	r25, 7
     f08:	08 95       	ret

00000f0a <__fp_inf>:
     f0a:	97 f9       	bld	r25, 7
     f0c:	9f 67       	ori	r25, 0x7F	; 127
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	08 95       	ret

00000f16 <__fp_nan>:
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	80 ec       	ldi	r24, 0xC0	; 192
     f1a:	08 95       	ret

00000f1c <__fp_pscA>:
     f1c:	00 24       	eor	r0, r0
     f1e:	0a 94       	dec	r0
     f20:	16 16       	cp	r1, r22
     f22:	17 06       	cpc	r1, r23
     f24:	18 06       	cpc	r1, r24
     f26:	09 06       	cpc	r0, r25
     f28:	08 95       	ret

00000f2a <__fp_pscB>:
     f2a:	00 24       	eor	r0, r0
     f2c:	0a 94       	dec	r0
     f2e:	12 16       	cp	r1, r18
     f30:	13 06       	cpc	r1, r19
     f32:	14 06       	cpc	r1, r20
     f34:	05 06       	cpc	r0, r21
     f36:	08 95       	ret

00000f38 <__fp_round>:
     f38:	09 2e       	mov	r0, r25
     f3a:	03 94       	inc	r0
     f3c:	00 0c       	add	r0, r0
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__fp_round+0xc>
     f40:	88 23       	and	r24, r24
     f42:	52 f0       	brmi	.+20     	; 0xf58 <__fp_round+0x20>
     f44:	bb 0f       	add	r27, r27
     f46:	40 f4       	brcc	.+16     	; 0xf58 <__fp_round+0x20>
     f48:	bf 2b       	or	r27, r31
     f4a:	11 f4       	brne	.+4      	; 0xf50 <__fp_round+0x18>
     f4c:	60 ff       	sbrs	r22, 0
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__fp_round+0x20>
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <__fp_split3>:
     f5a:	57 fd       	sbrc	r21, 7
     f5c:	90 58       	subi	r25, 0x80	; 128
     f5e:	44 0f       	add	r20, r20
     f60:	55 1f       	adc	r21, r21
     f62:	59 f0       	breq	.+22     	; 0xf7a <__fp_splitA+0x10>
     f64:	5f 3f       	cpi	r21, 0xFF	; 255
     f66:	71 f0       	breq	.+28     	; 0xf84 <__fp_splitA+0x1a>
     f68:	47 95       	ror	r20

00000f6a <__fp_splitA>:
     f6a:	88 0f       	add	r24, r24
     f6c:	97 fb       	bst	r25, 7
     f6e:	99 1f       	adc	r25, r25
     f70:	61 f0       	breq	.+24     	; 0xf8a <__fp_splitA+0x20>
     f72:	9f 3f       	cpi	r25, 0xFF	; 255
     f74:	79 f0       	breq	.+30     	; 0xf94 <__fp_splitA+0x2a>
     f76:	87 95       	ror	r24
     f78:	08 95       	ret
     f7a:	12 16       	cp	r1, r18
     f7c:	13 06       	cpc	r1, r19
     f7e:	14 06       	cpc	r1, r20
     f80:	55 1f       	adc	r21, r21
     f82:	f2 cf       	rjmp	.-28     	; 0xf68 <__fp_split3+0xe>
     f84:	46 95       	lsr	r20
     f86:	f1 df       	rcall	.-30     	; 0xf6a <__fp_splitA>
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <__fp_splitA+0x30>
     f8a:	16 16       	cp	r1, r22
     f8c:	17 06       	cpc	r1, r23
     f8e:	18 06       	cpc	r1, r24
     f90:	99 1f       	adc	r25, r25
     f92:	f1 cf       	rjmp	.-30     	; 0xf76 <__fp_splitA+0xc>
     f94:	86 95       	lsr	r24
     f96:	71 05       	cpc	r23, r1
     f98:	61 05       	cpc	r22, r1
     f9a:	08 94       	sec
     f9c:	08 95       	ret

00000f9e <__fp_zero>:
     f9e:	e8 94       	clt

00000fa0 <__fp_szero>:
     fa0:	bb 27       	eor	r27, r27
     fa2:	66 27       	eor	r22, r22
     fa4:	77 27       	eor	r23, r23
     fa6:	cb 01       	movw	r24, r22
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret

00000fac <__mulsf3>:
     fac:	0b d0       	rcall	.+22     	; 0xfc4 <__mulsf3x>
     fae:	c4 cf       	rjmp	.-120    	; 0xf38 <__fp_round>
     fb0:	b5 df       	rcall	.-150    	; 0xf1c <__fp_pscA>
     fb2:	28 f0       	brcs	.+10     	; 0xfbe <__mulsf3+0x12>
     fb4:	ba df       	rcall	.-140    	; 0xf2a <__fp_pscB>
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <__mulsf3+0x12>
     fb8:	95 23       	and	r25, r21
     fba:	09 f0       	breq	.+2      	; 0xfbe <__mulsf3+0x12>
     fbc:	a6 cf       	rjmp	.-180    	; 0xf0a <__fp_inf>
     fbe:	ab cf       	rjmp	.-170    	; 0xf16 <__fp_nan>
     fc0:	11 24       	eor	r1, r1
     fc2:	ee cf       	rjmp	.-36     	; 0xfa0 <__fp_szero>

00000fc4 <__mulsf3x>:
     fc4:	ca df       	rcall	.-108    	; 0xf5a <__fp_split3>
     fc6:	a0 f3       	brcs	.-24     	; 0xfb0 <__mulsf3+0x4>

00000fc8 <__mulsf3_pse>:
     fc8:	95 9f       	mul	r25, r21
     fca:	d1 f3       	breq	.-12     	; 0xfc0 <__mulsf3+0x14>
     fcc:	95 0f       	add	r25, r21
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	55 1f       	adc	r21, r21
     fd2:	62 9f       	mul	r22, r18
     fd4:	f0 01       	movw	r30, r0
     fd6:	72 9f       	mul	r23, r18
     fd8:	bb 27       	eor	r27, r27
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	63 9f       	mul	r22, r19
     fe0:	aa 27       	eor	r26, r26
     fe2:	f0 0d       	add	r31, r0
     fe4:	b1 1d       	adc	r27, r1
     fe6:	aa 1f       	adc	r26, r26
     fe8:	64 9f       	mul	r22, r20
     fea:	66 27       	eor	r22, r22
     fec:	b0 0d       	add	r27, r0
     fee:	a1 1d       	adc	r26, r1
     ff0:	66 1f       	adc	r22, r22
     ff2:	82 9f       	mul	r24, r18
     ff4:	22 27       	eor	r18, r18
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	73 9f       	mul	r23, r19
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	62 1f       	adc	r22, r18
    1004:	83 9f       	mul	r24, r19
    1006:	a0 0d       	add	r26, r0
    1008:	61 1d       	adc	r22, r1
    100a:	22 1f       	adc	r18, r18
    100c:	74 9f       	mul	r23, r20
    100e:	33 27       	eor	r19, r19
    1010:	a0 0d       	add	r26, r0
    1012:	61 1d       	adc	r22, r1
    1014:	23 1f       	adc	r18, r19
    1016:	84 9f       	mul	r24, r20
    1018:	60 0d       	add	r22, r0
    101a:	21 1d       	adc	r18, r1
    101c:	82 2f       	mov	r24, r18
    101e:	76 2f       	mov	r23, r22
    1020:	6a 2f       	mov	r22, r26
    1022:	11 24       	eor	r1, r1
    1024:	9f 57       	subi	r25, 0x7F	; 127
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	8a f0       	brmi	.+34     	; 0x104c <__mulsf3_pse+0x84>
    102a:	e1 f0       	breq	.+56     	; 0x1064 <__mulsf3_pse+0x9c>
    102c:	88 23       	and	r24, r24
    102e:	4a f0       	brmi	.+18     	; 0x1042 <__mulsf3_pse+0x7a>
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	bb 1f       	adc	r27, r27
    1036:	66 1f       	adc	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	91 50       	subi	r25, 0x01	; 1
    103e:	50 40       	sbci	r21, 0x00	; 0
    1040:	a9 f7       	brne	.-22     	; 0x102c <__mulsf3_pse+0x64>
    1042:	9e 3f       	cpi	r25, 0xFE	; 254
    1044:	51 05       	cpc	r21, r1
    1046:	70 f0       	brcs	.+28     	; 0x1064 <__mulsf3_pse+0x9c>
    1048:	60 cf       	rjmp	.-320    	; 0xf0a <__fp_inf>
    104a:	aa cf       	rjmp	.-172    	; 0xfa0 <__fp_szero>
    104c:	5f 3f       	cpi	r21, 0xFF	; 255
    104e:	ec f3       	brlt	.-6      	; 0x104a <__mulsf3_pse+0x82>
    1050:	98 3e       	cpi	r25, 0xE8	; 232
    1052:	dc f3       	brlt	.-10     	; 0x104a <__mulsf3_pse+0x82>
    1054:	86 95       	lsr	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b7 95       	ror	r27
    105c:	f7 95       	ror	r31
    105e:	e7 95       	ror	r30
    1060:	9f 5f       	subi	r25, 0xFF	; 255
    1062:	c1 f7       	brne	.-16     	; 0x1054 <__mulsf3_pse+0x8c>
    1064:	fe 2b       	or	r31, r30
    1066:	88 0f       	add	r24, r24
    1068:	91 1d       	adc	r25, r1
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret

00001072 <__udivmodsi4>:
    1072:	a1 e2       	ldi	r26, 0x21	; 33
    1074:	1a 2e       	mov	r1, r26
    1076:	aa 1b       	sub	r26, r26
    1078:	bb 1b       	sub	r27, r27
    107a:	fd 01       	movw	r30, r26
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <__udivmodsi4_ep>

0000107e <__udivmodsi4_loop>:
    107e:	aa 1f       	adc	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	ee 1f       	adc	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	a2 17       	cp	r26, r18
    1088:	b3 07       	cpc	r27, r19
    108a:	e4 07       	cpc	r30, r20
    108c:	f5 07       	cpc	r31, r21
    108e:	20 f0       	brcs	.+8      	; 0x1098 <__udivmodsi4_ep>
    1090:	a2 1b       	sub	r26, r18
    1092:	b3 0b       	sbc	r27, r19
    1094:	e4 0b       	sbc	r30, r20
    1096:	f5 0b       	sbc	r31, r21

00001098 <__udivmodsi4_ep>:
    1098:	66 1f       	adc	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	1a 94       	dec	r1
    10a2:	69 f7       	brne	.-38     	; 0x107e <__udivmodsi4_loop>
    10a4:	60 95       	com	r22
    10a6:	70 95       	com	r23
    10a8:	80 95       	com	r24
    10aa:	90 95       	com	r25
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	bd 01       	movw	r22, r26
    10b2:	cf 01       	movw	r24, r30
    10b4:	08 95       	ret

000010b6 <__divmodsi4>:
    10b6:	05 2e       	mov	r0, r21
    10b8:	97 fb       	bst	r25, 7
    10ba:	16 f4       	brtc	.+4      	; 0x10c0 <__divmodsi4+0xa>
    10bc:	00 94       	com	r0
    10be:	0f d0       	rcall	.+30     	; 0x10de <__negsi2>
    10c0:	57 fd       	sbrc	r21, 7
    10c2:	05 d0       	rcall	.+10     	; 0x10ce <__divmodsi4_neg2>
    10c4:	d6 df       	rcall	.-84     	; 0x1072 <__udivmodsi4>
    10c6:	07 fc       	sbrc	r0, 7
    10c8:	02 d0       	rcall	.+4      	; 0x10ce <__divmodsi4_neg2>
    10ca:	46 f4       	brtc	.+16     	; 0x10dc <__divmodsi4_exit>
    10cc:	08 c0       	rjmp	.+16     	; 0x10de <__negsi2>

000010ce <__divmodsi4_neg2>:
    10ce:	50 95       	com	r21
    10d0:	40 95       	com	r20
    10d2:	30 95       	com	r19
    10d4:	21 95       	neg	r18
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	4f 4f       	sbci	r20, 0xFF	; 255
    10da:	5f 4f       	sbci	r21, 0xFF	; 255

000010dc <__divmodsi4_exit>:
    10dc:	08 95       	ret

000010de <__negsi2>:
    10de:	90 95       	com	r25
    10e0:	80 95       	com	r24
    10e2:	70 95       	com	r23
    10e4:	61 95       	neg	r22
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	08 95       	ret

000010ee <__umulhisi3>:
    10ee:	a2 9f       	mul	r26, r18
    10f0:	b0 01       	movw	r22, r0
    10f2:	b3 9f       	mul	r27, r19
    10f4:	c0 01       	movw	r24, r0
    10f6:	a3 9f       	mul	r26, r19
    10f8:	70 0d       	add	r23, r0
    10fa:	81 1d       	adc	r24, r1
    10fc:	11 24       	eor	r1, r1
    10fe:	91 1d       	adc	r25, r1
    1100:	b2 9f       	mul	r27, r18
    1102:	70 0d       	add	r23, r0
    1104:	81 1d       	adc	r24, r1
    1106:	11 24       	eor	r1, r1
    1108:	91 1d       	adc	r25, r1
    110a:	08 95       	ret

0000110c <_exit>:
    110c:	f8 94       	cli

0000110e <__stop_program>:
    110e:	ff cf       	rjmp	.-2      	; 0x110e <__stop_program>
